// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package github

import (
	json "encoding/json"
	http "net/http"
	url "net/url"
	time "time"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIMeta) DeepCopyInto(out *APIMeta) {
	*out = *in
	if in.Hooks != nil {
		in, out := &in.Hooks, &out.Hooks
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Git != nil {
		in, out := &in.Git, &out.Git
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.VerifiablePasswordAuthentication != nil {
		in, out := &in.VerifiablePasswordAuthentication, &out.VerifiablePasswordAuthentication
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Pages != nil {
		in, out := &in.Pages, &out.Pages
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Importer != nil {
		in, out := &in.Importer, &out.Importer
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIMeta.
func (in *APIMeta) DeepCopy() *APIMeta {
	if in == nil {
		return nil
	}
	out := new(APIMeta)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AbuseRateLimitError) DeepCopyInto(out *AbuseRateLimitError) {
	*out = *in
	if in.Response != nil {
		in, out := &in.Response, &out.Response
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Response)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.RetryAfter != nil {
		in, out := &in.RetryAfter, &out.RetryAfter
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Duration)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AbuseRateLimitError.
func (in *AbuseRateLimitError) DeepCopy() *AbuseRateLimitError {
	if in == nil {
		return nil
	}
	out := new(AbuseRateLimitError)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AcceptedError) DeepCopyInto(out *AcceptedError) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AcceptedError.
func (in *AcceptedError) DeepCopy() *AcceptedError {
	if in == nil {
		return nil
	}
	out := new(AcceptedError)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivityListStarredOptions) DeepCopyInto(out *ActivityListStarredOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivityListStarredOptions.
func (in *ActivityListStarredOptions) DeepCopy() *ActivityListStarredOptions {
	if in == nil {
		return nil
	}
	out := new(ActivityListStarredOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivityService) DeepCopyInto(out *ActivityService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivityService.
func (in *ActivityService) DeepCopy() *ActivityService {
	if in == nil {
		return nil
	}
	out := new(ActivityService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdminEnforcement) DeepCopyInto(out *AdminEnforcement) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdminEnforcement.
func (in *AdminEnforcement) DeepCopy() *AdminEnforcement {
	if in == nil {
		return nil
	}
	out := new(AdminEnforcement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdminService) DeepCopyInto(out *AdminService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdminService.
func (in *AdminService) DeepCopy() *AdminService {
	if in == nil {
		return nil
	}
	out := new(AdminService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AdminStats) DeepCopyInto(out *AdminStats) {
	*out = *in
	if in.Issues != nil {
		in, out := &in.Issues, &out.Issues
		if *in == nil {
			*out = nil
		} else {
			*out = new(IssueStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Hooks != nil {
		in, out := &in.Hooks, &out.Hooks
		if *in == nil {
			*out = nil
		} else {
			*out = new(HookStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Milestones != nil {
		in, out := &in.Milestones, &out.Milestones
		if *in == nil {
			*out = nil
		} else {
			*out = new(MilestoneStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Orgs != nil {
		in, out := &in.Orgs, &out.Orgs
		if *in == nil {
			*out = nil
		} else {
			*out = new(OrgStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommentStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Pages != nil {
		in, out := &in.Pages, &out.Pages
		if *in == nil {
			*out = nil
		} else {
			*out = new(PageStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		if *in == nil {
			*out = nil
		} else {
			*out = new(UserStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Gists != nil {
		in, out := &in.Gists, &out.Gists
		if *in == nil {
			*out = nil
		} else {
			*out = new(GistStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Pulls != nil {
		in, out := &in.Pulls, &out.Pulls
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repos != nil {
		in, out := &in.Repos, &out.Repos
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepoStats)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AdminStats.
func (in *AdminStats) DeepCopy() *AdminStats {
	if in == nil {
		return nil
	}
	out := new(AdminStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *App) DeepCopyInto(out *App) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ExternalURL != nil {
		in, out := &in.ExternalURL, &out.ExternalURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new App.
func (in *App) DeepCopy() *App {
	if in == nil {
		return nil
	}
	out := new(App)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppsService) DeepCopyInto(out *AppsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppsService.
func (in *AppsService) DeepCopy() *AppsService {
	if in == nil {
		return nil
	}
	out := new(AppsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Authorization) DeepCopyInto(out *Authorization) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]Scope, len(*in))
		copy(*out, *in)
	}
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TokenLastEight != nil {
		in, out := &in.TokenLastEight, &out.TokenLastEight
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HashedToken != nil {
		in, out := &in.HashedToken, &out.HashedToken
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.App != nil {
		in, out := &in.App, &out.App
		if *in == nil {
			*out = nil
		} else {
			*out = new(AuthorizationApp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NoteURL != nil {
		in, out := &in.NoteURL, &out.NoteURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Fingerprint != nil {
		in, out := &in.Fingerprint, &out.Fingerprint
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Authorization.
func (in *Authorization) DeepCopy() *Authorization {
	if in == nil {
		return nil
	}
	out := new(Authorization)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationApp) DeepCopyInto(out *AuthorizationApp) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationApp.
func (in *AuthorizationApp) DeepCopy() *AuthorizationApp {
	if in == nil {
		return nil
	}
	out := new(AuthorizationApp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationRequest) DeepCopyInto(out *AuthorizationRequest) {
	*out = *in
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]Scope, len(*in))
		copy(*out, *in)
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NoteURL != nil {
		in, out := &in.NoteURL, &out.NoteURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ClientID != nil {
		in, out := &in.ClientID, &out.ClientID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ClientSecret != nil {
		in, out := &in.ClientSecret, &out.ClientSecret
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Fingerprint != nil {
		in, out := &in.Fingerprint, &out.Fingerprint
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationRequest.
func (in *AuthorizationRequest) DeepCopy() *AuthorizationRequest {
	if in == nil {
		return nil
	}
	out := new(AuthorizationRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationUpdateRequest) DeepCopyInto(out *AuthorizationUpdateRequest) {
	*out = *in
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.AddScopes != nil {
		in, out := &in.AddScopes, &out.AddScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RemoveScopes != nil {
		in, out := &in.RemoveScopes, &out.RemoveScopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NoteURL != nil {
		in, out := &in.NoteURL, &out.NoteURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Fingerprint != nil {
		in, out := &in.Fingerprint, &out.Fingerprint
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationUpdateRequest.
func (in *AuthorizationUpdateRequest) DeepCopy() *AuthorizationUpdateRequest {
	if in == nil {
		return nil
	}
	out := new(AuthorizationUpdateRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthorizationsService) DeepCopyInto(out *AuthorizationsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthorizationsService.
func (in *AuthorizationsService) DeepCopy() *AuthorizationsService {
	if in == nil {
		return nil
	}
	out := new(AuthorizationsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoTriggerCheck) DeepCopyInto(out *AutoTriggerCheck) {
	*out = *in
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Setting != nil {
		in, out := &in.Setting, &out.Setting
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoTriggerCheck.
func (in *AutoTriggerCheck) DeepCopy() *AutoTriggerCheck {
	if in == nil {
		return nil
	}
	out := new(AutoTriggerCheck)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BasicAuthTransport) DeepCopyInto(out *BasicAuthTransport) {
	*out = *in
	if in.Transport == nil {
		out.Transport = nil
	} else {
		out.Transport = in.Transport.DeepCopyRoundTripper()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BasicAuthTransport.
func (in *BasicAuthTransport) DeepCopy() *BasicAuthTransport {
	if in == nil {
		return nil
	}
	out := new(BasicAuthTransport)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Blob) DeepCopyInto(out *Blob) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Blob.
func (in *Blob) DeepCopy() *Blob {
	if in == nil {
		return nil
	}
	out := new(Blob)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Branch) DeepCopyInto(out *Branch) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Protected != nil {
		in, out := &in.Protected, &out.Protected
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Branch.
func (in *Branch) DeepCopy() *Branch {
	if in == nil {
		return nil
	}
	out := new(Branch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchRestrictions) DeepCopyInto(out *BranchRestrictions) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]*Team, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Team)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchRestrictions.
func (in *BranchRestrictions) DeepCopy() *BranchRestrictions {
	if in == nil {
		return nil
	}
	out := new(BranchRestrictions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BranchRestrictionsRequest) DeepCopyInto(out *BranchRestrictionsRequest) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BranchRestrictionsRequest.
func (in *BranchRestrictionsRequest) DeepCopy() *BranchRestrictionsRequest {
	if in == nil {
		return nil
	}
	out := new(BranchRestrictionsRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRun) DeepCopyInto(out *CheckRun) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.HeadSHA != nil {
		in, out := &in.HeadSHA, &out.HeadSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Conclusion != nil {
		in, out := &in.Conclusion, &out.Conclusion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StartedAt != nil {
		in, out := &in.StartedAt, &out.StartedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CompletedAt != nil {
		in, out := &in.CompletedAt, &out.CompletedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Output != nil {
		in, out := &in.Output, &out.Output
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckRunOutput)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CheckSuite != nil {
		in, out := &in.CheckSuite, &out.CheckSuite
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckSuite)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.App != nil {
		in, out := &in.App, &out.App
		if *in == nil {
			*out = nil
		} else {
			*out = new(App)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequests != nil {
		in, out := &in.PullRequests, &out.PullRequests
		*out = make([]*PullRequest, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(PullRequest)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRun.
func (in *CheckRun) DeepCopy() *CheckRun {
	if in == nil {
		return nil
	}
	out := new(CheckRun)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRunAnnotation) DeepCopyInto(out *CheckRunAnnotation) {
	*out = *in
	if in.FileName != nil {
		in, out := &in.FileName, &out.FileName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BlobHRef != nil {
		in, out := &in.BlobHRef, &out.BlobHRef
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StartLine != nil {
		in, out := &in.StartLine, &out.StartLine
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.EndLine != nil {
		in, out := &in.EndLine, &out.EndLine
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.WarningLevel != nil {
		in, out := &in.WarningLevel, &out.WarningLevel
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RawDetails != nil {
		in, out := &in.RawDetails, &out.RawDetails
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRunAnnotation.
func (in *CheckRunAnnotation) DeepCopy() *CheckRunAnnotation {
	if in == nil {
		return nil
	}
	out := new(CheckRunAnnotation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRunEvent) DeepCopyInto(out *CheckRunEvent) {
	*out = *in
	if in.CheckRun != nil {
		in, out := &in.CheckRun, &out.CheckRun
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckRun)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRunEvent.
func (in *CheckRunEvent) DeepCopy() *CheckRunEvent {
	if in == nil {
		return nil
	}
	out := new(CheckRunEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRunImage) DeepCopyInto(out *CheckRunImage) {
	*out = *in
	if in.Alt != nil {
		in, out := &in.Alt, &out.Alt
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ImageURL != nil {
		in, out := &in.ImageURL, &out.ImageURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Caption != nil {
		in, out := &in.Caption, &out.Caption
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRunImage.
func (in *CheckRunImage) DeepCopy() *CheckRunImage {
	if in == nil {
		return nil
	}
	out := new(CheckRunImage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckRunOutput) DeepCopyInto(out *CheckRunOutput) {
	*out = *in
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AnnotationsCount != nil {
		in, out := &in.AnnotationsCount, &out.AnnotationsCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.AnnotationsURL != nil {
		in, out := &in.AnnotationsURL, &out.AnnotationsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make([]*CheckRunAnnotation, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(CheckRunAnnotation)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Images != nil {
		in, out := &in.Images, &out.Images
		*out = make([]*CheckRunImage, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(CheckRunImage)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckRunOutput.
func (in *CheckRunOutput) DeepCopy() *CheckRunOutput {
	if in == nil {
		return nil
	}
	out := new(CheckRunOutput)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckSuite) DeepCopyInto(out *CheckSuite) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.HeadBranch != nil {
		in, out := &in.HeadBranch, &out.HeadBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HeadSHA != nil {
		in, out := &in.HeadSHA, &out.HeadSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BeforeSHA != nil {
		in, out := &in.BeforeSHA, &out.BeforeSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AfterSHA != nil {
		in, out := &in.AfterSHA, &out.AfterSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Conclusion != nil {
		in, out := &in.Conclusion, &out.Conclusion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.App != nil {
		in, out := &in.App, &out.App
		if *in == nil {
			*out = nil
		} else {
			*out = new(App)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequests != nil {
		in, out := &in.PullRequests, &out.PullRequests
		*out = make([]*PullRequest, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(PullRequest)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckSuite.
func (in *CheckSuite) DeepCopy() *CheckSuite {
	if in == nil {
		return nil
	}
	out := new(CheckSuite)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckSuiteEvent) DeepCopyInto(out *CheckSuiteEvent) {
	*out = *in
	if in.CheckSuite != nil {
		in, out := &in.CheckSuite, &out.CheckSuite
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckSuite)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckSuiteEvent.
func (in *CheckSuiteEvent) DeepCopy() *CheckSuiteEvent {
	if in == nil {
		return nil
	}
	out := new(CheckSuiteEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckSuitePreferenceOptions) DeepCopyInto(out *CheckSuitePreferenceOptions) {
	*out = *in
	if in.PreferenceList != nil {
		in, out := &in.PreferenceList, &out.PreferenceList
		if *in == nil {
			*out = nil
		} else {
			*out = new(PreferenceList)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckSuitePreferenceOptions.
func (in *CheckSuitePreferenceOptions) DeepCopy() *CheckSuitePreferenceOptions {
	if in == nil {
		return nil
	}
	out := new(CheckSuitePreferenceOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CheckSuitePreferenceResults) DeepCopyInto(out *CheckSuitePreferenceResults) {
	*out = *in
	if in.Preferences != nil {
		in, out := &in.Preferences, &out.Preferences
		if *in == nil {
			*out = nil
		} else {
			*out = new(PreferenceList)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CheckSuitePreferenceResults.
func (in *CheckSuitePreferenceResults) DeepCopy() *CheckSuitePreferenceResults {
	if in == nil {
		return nil
	}
	out := new(CheckSuitePreferenceResults)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ChecksService) DeepCopyInto(out *ChecksService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ChecksService.
func (in *ChecksService) DeepCopy() *ChecksService {
	if in == nil {
		return nil
	}
	out := new(ChecksService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Client) DeepCopyInto(out *Client) {
	*out = *in
	out.clientMu = in.clientMu
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Client)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.BaseURL != nil {
		in, out := &in.BaseURL, &out.BaseURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(url.URL)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UploadURL != nil {
		in, out := &in.UploadURL, &out.UploadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(url.URL)
			(*in).DeepCopyInto(*out)
		}
	}
	out.rateMu = in.rateMu
	out.rateLimits = in.rateLimits.DeepCopy()
	in.common.DeepCopyInto(&out.common)
	if in.Activity != nil {
		in, out := &in.Activity, &out.Activity
		if *in == nil {
			*out = nil
		} else {
			*out = new(ActivityService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Admin != nil {
		in, out := &in.Admin, &out.Admin
		if *in == nil {
			*out = nil
		} else {
			*out = new(AdminService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Apps != nil {
		in, out := &in.Apps, &out.Apps
		if *in == nil {
			*out = nil
		} else {
			*out = new(AppsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Authorizations != nil {
		in, out := &in.Authorizations, &out.Authorizations
		if *in == nil {
			*out = nil
		} else {
			*out = new(AuthorizationsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Checks != nil {
		in, out := &in.Checks, &out.Checks
		if *in == nil {
			*out = nil
		} else {
			*out = new(ChecksService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Gists != nil {
		in, out := &in.Gists, &out.Gists
		if *in == nil {
			*out = nil
		} else {
			*out = new(GistsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Git != nil {
		in, out := &in.Git, &out.Git
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Gitignores != nil {
		in, out := &in.Gitignores, &out.Gitignores
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitignoresService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Issues != nil {
		in, out := &in.Issues, &out.Issues
		if *in == nil {
			*out = nil
		} else {
			*out = new(IssuesService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Licenses != nil {
		in, out := &in.Licenses, &out.Licenses
		if *in == nil {
			*out = nil
		} else {
			*out = new(LicensesService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Marketplace != nil {
		in, out := &in.Marketplace, &out.Marketplace
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplaceService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Migrations != nil {
		in, out := &in.Migrations, &out.Migrations
		if *in == nil {
			*out = nil
		} else {
			*out = new(MigrationService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Organizations != nil {
		in, out := &in.Organizations, &out.Organizations
		if *in == nil {
			*out = nil
		} else {
			*out = new(OrganizationsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Projects != nil {
		in, out := &in.Projects, &out.Projects
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequests != nil {
		in, out := &in.PullRequests, &out.PullRequests
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reactions != nil {
		in, out := &in.Reactions, &out.Reactions
		if *in == nil {
			*out = nil
		} else {
			*out = new(ReactionsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoriesService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Search != nil {
		in, out := &in.Search, &out.Search
		if *in == nil {
			*out = nil
		} else {
			*out = new(SearchService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		if *in == nil {
			*out = nil
		} else {
			*out = new(TeamsService)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		if *in == nil {
			*out = nil
		} else {
			*out = new(UsersService)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Client.
func (in *Client) DeepCopy() *Client {
	if in == nil {
		return nil
	}
	out := new(Client)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CodeOfConduct) DeepCopyInto(out *CodeOfConduct) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CodeOfConduct.
func (in *CodeOfConduct) DeepCopy() *CodeOfConduct {
	if in == nil {
		return nil
	}
	out := new(CodeOfConduct)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CodeResult) DeepCopyInto(out *CodeResult) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.TextMatches != nil {
		in, out := &in.TextMatches, &out.TextMatches
		*out = make([]TextMatch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CodeResult.
func (in *CodeResult) DeepCopy() *CodeResult {
	if in == nil {
		return nil
	}
	out := new(CodeResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CodeSearchResult) DeepCopyInto(out *CodeSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CodeResults != nil {
		in, out := &in.CodeResults, &out.CodeResults
		*out = make([]CodeResult, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CodeSearchResult.
func (in *CodeSearchResult) DeepCopy() *CodeSearchResult {
	if in == nil {
		return nil
	}
	out := new(CodeSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CombinedStatus) DeepCopyInto(out *CombinedStatus) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TotalCount != nil {
		in, out := &in.TotalCount, &out.TotalCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Statuses != nil {
		in, out := &in.Statuses, &out.Statuses
		*out = make([]RepoStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CommitURL != nil {
		in, out := &in.CommitURL, &out.CommitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CombinedStatus.
func (in *CombinedStatus) DeepCopy() *CombinedStatus {
	if in == nil {
		return nil
	}
	out := new(CombinedStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommentStats) DeepCopyInto(out *CommentStats) {
	*out = *in
	if in.TotalCommitComments != nil {
		in, out := &in.TotalCommitComments, &out.TotalCommitComments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalGistComments != nil {
		in, out := &in.TotalGistComments, &out.TotalGistComments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalIssueComments != nil {
		in, out := &in.TotalIssueComments, &out.TotalIssueComments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalPullRequestComments != nil {
		in, out := &in.TotalPullRequestComments, &out.TotalPullRequestComments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommentStats.
func (in *CommentStats) DeepCopy() *CommentStats {
	if in == nil {
		return nil
	}
	out := new(CommentStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Commit) DeepCopyInto(out *Commit) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Tree != nil {
		in, out := &in.Tree, &out.Tree
		if *in == nil {
			*out = nil
		} else {
			*out = new(Tree)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Parents != nil {
		in, out := &in.Parents, &out.Parents
		*out = make([]Commit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Stats != nil {
		in, out := &in.Stats, &out.Stats
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Verification != nil {
		in, out := &in.Verification, &out.Verification
		if *in == nil {
			*out = nil
		} else {
			*out = new(SignatureVerification)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentCount != nil {
		in, out := &in.CommentCount, &out.CommentCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Commit.
func (in *Commit) DeepCopy() *Commit {
	if in == nil {
		return nil
	}
	out := new(Commit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitAuthor) DeepCopyInto(out *CommitAuthor) {
	*out = *in
	if in.Date != nil {
		in, out := &in.Date, &out.Date
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitAuthor.
func (in *CommitAuthor) DeepCopy() *CommitAuthor {
	if in == nil {
		return nil
	}
	out := new(CommitAuthor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitCommentEvent) DeepCopyInto(out *CommitCommentEvent) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryComment)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitCommentEvent.
func (in *CommitCommentEvent) DeepCopy() *CommitCommentEvent {
	if in == nil {
		return nil
	}
	out := new(CommitCommentEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitFile) DeepCopyInto(out *CommitFile) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Additions != nil {
		in, out := &in.Additions, &out.Additions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Deletions != nil {
		in, out := &in.Deletions, &out.Deletions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Patch != nil {
		in, out := &in.Patch, &out.Patch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BlobURL != nil {
		in, out := &in.BlobURL, &out.BlobURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RawURL != nil {
		in, out := &in.RawURL, &out.RawURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ContentsURL != nil {
		in, out := &in.ContentsURL, &out.ContentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitFile.
func (in *CommitFile) DeepCopy() *CommitFile {
	if in == nil {
		return nil
	}
	out := new(CommitFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitResult) DeepCopyInto(out *CommitResult) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(Commit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Parents != nil {
		in, out := &in.Parents, &out.Parents
		*out = make([]*Commit, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Commit)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Score != nil {
		in, out := &in.Score, &out.Score
		if *in == nil {
			*out = nil
		} else {
			*out = new(float64)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitResult.
func (in *CommitResult) DeepCopy() *CommitResult {
	if in == nil {
		return nil
	}
	out := new(CommitResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitStats) DeepCopyInto(out *CommitStats) {
	*out = *in
	if in.Additions != nil {
		in, out := &in.Additions, &out.Additions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Deletions != nil {
		in, out := &in.Deletions, &out.Deletions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitStats.
func (in *CommitStats) DeepCopy() *CommitStats {
	if in == nil {
		return nil
	}
	out := new(CommitStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitsComparison) DeepCopyInto(out *CommitsComparison) {
	*out = *in
	if in.BaseCommit != nil {
		in, out := &in.BaseCommit, &out.BaseCommit
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MergeBaseCommit != nil {
		in, out := &in.MergeBaseCommit, &out.MergeBaseCommit
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AheadBy != nil {
		in, out := &in.AheadBy, &out.AheadBy
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.BehindBy != nil {
		in, out := &in.BehindBy, &out.BehindBy
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalCommits != nil {
		in, out := &in.TotalCommits, &out.TotalCommits
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		*out = make([]RepositoryCommit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]CommitFile, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PermalinkURL != nil {
		in, out := &in.PermalinkURL, &out.PermalinkURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DiffURL != nil {
		in, out := &in.DiffURL, &out.DiffURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PatchURL != nil {
		in, out := &in.PatchURL, &out.PatchURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitsComparison.
func (in *CommitsComparison) DeepCopy() *CommitsComparison {
	if in == nil {
		return nil
	}
	out := new(CommitsComparison)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitsListOptions) DeepCopyInto(out *CommitsListOptions) {
	*out = *in
	in.Since.DeepCopyInto(&out.Since)
	in.Until.DeepCopyInto(&out.Until)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitsListOptions.
func (in *CommitsListOptions) DeepCopy() *CommitsListOptions {
	if in == nil {
		return nil
	}
	out := new(CommitsListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommitsSearchResult) DeepCopyInto(out *CommitsSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		*out = make([]*CommitResult, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(CommitResult)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommitsSearchResult.
func (in *CommitsSearchResult) DeepCopy() *CommitsSearchResult {
	if in == nil {
		return nil
	}
	out := new(CommitsSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommunityHealthFiles) DeepCopyInto(out *CommunityHealthFiles) {
	*out = *in
	if in.CodeOfConduct != nil {
		in, out := &in.CodeOfConduct, &out.CodeOfConduct
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Contributing != nil {
		in, out := &in.Contributing, &out.Contributing
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.IssueTemplate != nil {
		in, out := &in.IssueTemplate, &out.IssueTemplate
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequestTemplate != nil {
		in, out := &in.PullRequestTemplate, &out.PullRequestTemplate
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Readme != nil {
		in, out := &in.Readme, &out.Readme
		if *in == nil {
			*out = nil
		} else {
			*out = new(Metric)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommunityHealthFiles.
func (in *CommunityHealthFiles) DeepCopy() *CommunityHealthFiles {
	if in == nil {
		return nil
	}
	out := new(CommunityHealthFiles)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CommunityHealthMetrics) DeepCopyInto(out *CommunityHealthMetrics) {
	*out = *in
	if in.HealthPercentage != nil {
		in, out := &in.HealthPercentage, &out.HealthPercentage
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommunityHealthFiles)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CommunityHealthMetrics.
func (in *CommunityHealthMetrics) DeepCopy() *CommunityHealthMetrics {
	if in == nil {
		return nil
	}
	out := new(CommunityHealthMetrics)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Contributor) DeepCopyInto(out *Contributor) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GravatarID != nil {
		in, out := &in.GravatarID, &out.GravatarID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowersURL != nil {
		in, out := &in.FollowersURL, &out.FollowersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowingURL != nil {
		in, out := &in.FollowingURL, &out.FollowingURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GistsURL != nil {
		in, out := &in.GistsURL, &out.GistsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StarredURL != nil {
		in, out := &in.StarredURL, &out.StarredURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubscriptionsURL != nil {
		in, out := &in.SubscriptionsURL, &out.SubscriptionsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OrganizationsURL != nil {
		in, out := &in.OrganizationsURL, &out.OrganizationsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReposURL != nil {
		in, out := &in.ReposURL, &out.ReposURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReceivedEventsURL != nil {
		in, out := &in.ReceivedEventsURL, &out.ReceivedEventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SiteAdmin != nil {
		in, out := &in.SiteAdmin, &out.SiteAdmin
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Contributions != nil {
		in, out := &in.Contributions, &out.Contributions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Contributor.
func (in *Contributor) DeepCopy() *Contributor {
	if in == nil {
		return nil
	}
	out := new(Contributor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContributorStats) DeepCopyInto(out *ContributorStats) {
	*out = *in
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(Contributor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Weeks != nil {
		in, out := &in.Weeks, &out.Weeks
		*out = make([]WeeklyStats, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContributorStats.
func (in *ContributorStats) DeepCopy() *ContributorStats {
	if in == nil {
		return nil
	}
	out := new(ContributorStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateCheckRunOptions) DeepCopyInto(out *CreateCheckRunOptions) {
	*out = *in
	if in.DetailsURL != nil {
		in, out := &in.DetailsURL, &out.DetailsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Conclusion != nil {
		in, out := &in.Conclusion, &out.Conclusion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StartedAt != nil {
		in, out := &in.StartedAt, &out.StartedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CompletedAt != nil {
		in, out := &in.CompletedAt, &out.CompletedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Output != nil {
		in, out := &in.Output, &out.Output
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckRunOutput)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateCheckRunOptions.
func (in *CreateCheckRunOptions) DeepCopy() *CreateCheckRunOptions {
	if in == nil {
		return nil
	}
	out := new(CreateCheckRunOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateCheckSuiteOptions) DeepCopyInto(out *CreateCheckSuiteOptions) {
	*out = *in
	if in.HeadBranch != nil {
		in, out := &in.HeadBranch, &out.HeadBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateCheckSuiteOptions.
func (in *CreateCheckSuiteOptions) DeepCopy() *CreateCheckSuiteOptions {
	if in == nil {
		return nil
	}
	out := new(CreateCheckSuiteOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateEvent) DeepCopyInto(out *CreateEvent) {
	*out = *in
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RefType != nil {
		in, out := &in.RefType, &out.RefType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MasterBranch != nil {
		in, out := &in.MasterBranch, &out.MasterBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PusherType != nil {
		in, out := &in.PusherType, &out.PusherType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateEvent.
func (in *CreateEvent) DeepCopy() *CreateEvent {
	if in == nil {
		return nil
	}
	out := new(CreateEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CreateOrgInvitationOptions) DeepCopyInto(out *CreateOrgInvitationOptions) {
	*out = *in
	if in.InviteeID != nil {
		in, out := &in.InviteeID, &out.InviteeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TeamID != nil {
		in, out := &in.TeamID, &out.TeamID
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CreateOrgInvitationOptions.
func (in *CreateOrgInvitationOptions) DeepCopy() *CreateOrgInvitationOptions {
	if in == nil {
		return nil
	}
	out := new(CreateOrgInvitationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeleteEvent) DeepCopyInto(out *DeleteEvent) {
	*out = *in
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RefType != nil {
		in, out := &in.RefType, &out.RefType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PusherType != nil {
		in, out := &in.PusherType, &out.PusherType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeleteEvent.
func (in *DeleteEvent) DeepCopy() *DeleteEvent {
	if in == nil {
		return nil
	}
	out := new(DeleteEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Deployment) DeepCopyInto(out *Deployment) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Task != nil {
		in, out := &in.Task, &out.Task
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		*out = make(json.RawMessage, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.StatusesURL != nil {
		in, out := &in.StatusesURL, &out.StatusesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Deployment.
func (in *Deployment) DeepCopy() *Deployment {
	if in == nil {
		return nil
	}
	out := new(Deployment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentEvent) DeepCopyInto(out *DeploymentEvent) {
	*out = *in
	if in.Deployment != nil {
		in, out := &in.Deployment, &out.Deployment
		if *in == nil {
			*out = nil
		} else {
			*out = new(Deployment)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentEvent.
func (in *DeploymentEvent) DeepCopy() *DeploymentEvent {
	if in == nil {
		return nil
	}
	out := new(DeploymentEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentRequest) DeepCopyInto(out *DeploymentRequest) {
	*out = *in
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Task != nil {
		in, out := &in.Task, &out.Task
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AutoMerge != nil {
		in, out := &in.AutoMerge, &out.AutoMerge
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.RequiredContexts != nil {
		in, out := &in.RequiredContexts, &out.RequiredContexts
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TransientEnvironment != nil {
		in, out := &in.TransientEnvironment, &out.TransientEnvironment
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ProductionEnvironment != nil {
		in, out := &in.ProductionEnvironment, &out.ProductionEnvironment
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentRequest.
func (in *DeploymentRequest) DeepCopy() *DeploymentRequest {
	if in == nil {
		return nil
	}
	out := new(DeploymentRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentStatus) DeepCopyInto(out *DeploymentStatus) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TargetURL != nil {
		in, out := &in.TargetURL, &out.TargetURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DeploymentURL != nil {
		in, out := &in.DeploymentURL, &out.DeploymentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentStatus.
func (in *DeploymentStatus) DeepCopy() *DeploymentStatus {
	if in == nil {
		return nil
	}
	out := new(DeploymentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentStatusEvent) DeepCopyInto(out *DeploymentStatusEvent) {
	*out = *in
	if in.Deployment != nil {
		in, out := &in.Deployment, &out.Deployment
		if *in == nil {
			*out = nil
		} else {
			*out = new(Deployment)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DeploymentStatus != nil {
		in, out := &in.DeploymentStatus, &out.DeploymentStatus
		if *in == nil {
			*out = nil
		} else {
			*out = new(DeploymentStatus)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentStatusEvent.
func (in *DeploymentStatusEvent) DeepCopy() *DeploymentStatusEvent {
	if in == nil {
		return nil
	}
	out := new(DeploymentStatusEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentStatusRequest) DeepCopyInto(out *DeploymentStatusRequest) {
	*out = *in
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LogURL != nil {
		in, out := &in.LogURL, &out.LogURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EnvironmentURL != nil {
		in, out := &in.EnvironmentURL, &out.EnvironmentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AutoInactive != nil {
		in, out := &in.AutoInactive, &out.AutoInactive
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentStatusRequest.
func (in *DeploymentStatusRequest) DeepCopy() *DeploymentStatusRequest {
	if in == nil {
		return nil
	}
	out := new(DeploymentStatusRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentsListOptions) DeepCopyInto(out *DeploymentsListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeploymentsListOptions.
func (in *DeploymentsListOptions) DeepCopy() *DeploymentsListOptions {
	if in == nil {
		return nil
	}
	out := new(DeploymentsListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscussionComment) DeepCopyInto(out *DiscussionComment) {
	*out = *in
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BodyHTML != nil {
		in, out := &in.BodyHTML, &out.BodyHTML
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BodyVersion != nil {
		in, out := &in.BodyVersion, &out.BodyVersion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.LastEditedAt != nil {
		in, out := &in.LastEditedAt, &out.LastEditedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DiscussionURL != nil {
		in, out := &in.DiscussionURL, &out.DiscussionURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscussionComment.
func (in *DiscussionComment) DeepCopy() *DiscussionComment {
	if in == nil {
		return nil
	}
	out := new(DiscussionComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscussionCommentListOptions) DeepCopyInto(out *DiscussionCommentListOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscussionCommentListOptions.
func (in *DiscussionCommentListOptions) DeepCopy() *DiscussionCommentListOptions {
	if in == nil {
		return nil
	}
	out := new(DiscussionCommentListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiscussionListOptions) DeepCopyInto(out *DiscussionListOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiscussionListOptions.
func (in *DiscussionListOptions) DeepCopy() *DiscussionListOptions {
	if in == nil {
		return nil
	}
	out := new(DiscussionListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DismissalRestrictions) DeepCopyInto(out *DismissalRestrictions) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]*Team, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Team)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DismissalRestrictions.
func (in *DismissalRestrictions) DeepCopy() *DismissalRestrictions {
	if in == nil {
		return nil
	}
	out := new(DismissalRestrictions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DismissalRestrictionsRequest) DeepCopyInto(out *DismissalRestrictionsRequest) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DismissalRestrictionsRequest.
func (in *DismissalRestrictionsRequest) DeepCopy() *DismissalRestrictionsRequest {
	if in == nil {
		return nil
	}
	out := new(DismissalRestrictionsRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DraftReviewComment) DeepCopyInto(out *DraftReviewComment) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DraftReviewComment.
func (in *DraftReviewComment) DeepCopy() *DraftReviewComment {
	if in == nil {
		return nil
	}
	out := new(DraftReviewComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EditChange) DeepCopyInto(out *EditChange) {
	*out = *in
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EditChange.
func (in *EditChange) DeepCopy() *EditChange {
	if in == nil {
		return nil
	}
	out := new(EditChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Error) DeepCopyInto(out *Error) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Error.
func (in *Error) DeepCopy() *Error {
	if in == nil {
		return nil
	}
	out := new(Error)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ErrorResponse) DeepCopyInto(out *ErrorResponse) {
	*out = *in
	if in.Response != nil {
		in, out := &in.Response, &out.Response
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Response)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]Error, len(*in))
		copy(*out, *in)
	}
	if in.Block != nil {
		in, out := &in.Block, &out.Block
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct {
				Reason    string
				CreatedAt *Timestamp
			})
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ErrorResponse.
func (in *ErrorResponse) DeepCopy() *ErrorResponse {
	if in == nil {
		return nil
	}
	out := new(ErrorResponse)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Event) DeepCopyInto(out *Event) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.RawPayload != nil {
		in, out := &in.RawPayload, &out.RawPayload
		if *in == nil {
			*out = nil
		} else {
			*out = new(json.RawMessage)
			if **in != nil {
				in, out := *in, *out
				*out = make([]byte, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Actor != nil {
		in, out := &in.Actor, &out.Actor
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Event.
func (in *Event) DeepCopy() *Event {
	if in == nil {
		return nil
	}
	out := new(Event)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FeedLink) DeepCopyInto(out *FeedLink) {
	*out = *in
	if in.HRef != nil {
		in, out := &in.HRef, &out.HRef
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FeedLink.
func (in *FeedLink) DeepCopy() *FeedLink {
	if in == nil {
		return nil
	}
	out := new(FeedLink)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Feeds) DeepCopyInto(out *Feeds) {
	*out = *in
	if in.TimelineURL != nil {
		in, out := &in.TimelineURL, &out.TimelineURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UserURL != nil {
		in, out := &in.UserURL, &out.UserURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CurrentUserPublicURL != nil {
		in, out := &in.CurrentUserPublicURL, &out.CurrentUserPublicURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CurrentUserURL != nil {
		in, out := &in.CurrentUserURL, &out.CurrentUserURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CurrentUserActorURL != nil {
		in, out := &in.CurrentUserActorURL, &out.CurrentUserActorURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CurrentUserOrganizationURL != nil {
		in, out := &in.CurrentUserOrganizationURL, &out.CurrentUserOrganizationURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CurrentUserOrganizationURLs != nil {
		in, out := &in.CurrentUserOrganizationURLs, &out.CurrentUserOrganizationURLs
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Links != nil {
		in, out := &in.Links, &out.Links
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct {
				Timeline                 *FeedLink
				User                     *FeedLink
				CurrentUserPublic        *FeedLink
				CurrentUser              *FeedLink
				CurrentUserActor         *FeedLink
				CurrentUserOrganization  *FeedLink
				CurrentUserOrganizations []FeedLink
			})
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Feeds.
func (in *Feeds) DeepCopy() *Feeds {
	if in == nil {
		return nil
	}
	out := new(Feeds)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ForkEvent) DeepCopyInto(out *ForkEvent) {
	*out = *in
	if in.Forkee != nil {
		in, out := &in.Forkee, &out.Forkee
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ForkEvent.
func (in *ForkEvent) DeepCopy() *ForkEvent {
	if in == nil {
		return nil
	}
	out := new(ForkEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GPGEmail) DeepCopyInto(out *GPGEmail) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Verified != nil {
		in, out := &in.Verified, &out.Verified
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GPGEmail.
func (in *GPGEmail) DeepCopy() *GPGEmail {
	if in == nil {
		return nil
	}
	out := new(GPGEmail)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GPGKey) DeepCopyInto(out *GPGKey) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.PrimaryKeyID != nil {
		in, out := &in.PrimaryKeyID, &out.PrimaryKeyID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.KeyID != nil {
		in, out := &in.KeyID, &out.KeyID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PublicKey != nil {
		in, out := &in.PublicKey, &out.PublicKey
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Emails != nil {
		in, out := &in.Emails, &out.Emails
		*out = make([]GPGEmail, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Subkeys != nil {
		in, out := &in.Subkeys, &out.Subkeys
		*out = make([]GPGKey, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CanSign != nil {
		in, out := &in.CanSign, &out.CanSign
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CanEncryptComms != nil {
		in, out := &in.CanEncryptComms, &out.CanEncryptComms
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CanEncryptStorage != nil {
		in, out := &in.CanEncryptStorage, &out.CanEncryptStorage
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CanCertify != nil {
		in, out := &in.CanCertify, &out.CanCertify
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ExpiresAt != nil {
		in, out := &in.ExpiresAt, &out.ExpiresAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GPGKey.
func (in *GPGKey) DeepCopy() *GPGKey {
	if in == nil {
		return nil
	}
	out := new(GPGKey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Gist) DeepCopyInto(out *Gist) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Public != nil {
		in, out := &in.Public, &out.Public
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make(map[GistFilename]GistFile, len(*in))
		for key, val := range *in {
			newVal := new(GistFile)
			val.DeepCopyInto(newVal)
			(*out)[key] = *newVal
		}
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitPullURL != nil {
		in, out := &in.GitPullURL, &out.GitPullURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitPushURL != nil {
		in, out := &in.GitPushURL, &out.GitPushURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Gist.
func (in *Gist) DeepCopy() *Gist {
	if in == nil {
		return nil
	}
	out := new(Gist)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistComment) DeepCopyInto(out *GistComment) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistComment.
func (in *GistComment) DeepCopy() *GistComment {
	if in == nil {
		return nil
	}
	out := new(GistComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistCommit) DeepCopyInto(out *GistCommit) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ChangeStatus != nil {
		in, out := &in.ChangeStatus, &out.ChangeStatus
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CommittedAt != nil {
		in, out := &in.CommittedAt, &out.CommittedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistCommit.
func (in *GistCommit) DeepCopy() *GistCommit {
	if in == nil {
		return nil
	}
	out := new(GistCommit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistFile) DeepCopyInto(out *GistFile) {
	*out = *in
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Filename != nil {
		in, out := &in.Filename, &out.Filename
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RawURL != nil {
		in, out := &in.RawURL, &out.RawURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistFile.
func (in *GistFile) DeepCopy() *GistFile {
	if in == nil {
		return nil
	}
	out := new(GistFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistFork) DeepCopyInto(out *GistFork) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistFork.
func (in *GistFork) DeepCopy() *GistFork {
	if in == nil {
		return nil
	}
	out := new(GistFork)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistListOptions) DeepCopyInto(out *GistListOptions) {
	*out = *in
	in.Since.DeepCopyInto(&out.Since)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistListOptions.
func (in *GistListOptions) DeepCopy() *GistListOptions {
	if in == nil {
		return nil
	}
	out := new(GistListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistStats) DeepCopyInto(out *GistStats) {
	*out = *in
	if in.TotalGists != nil {
		in, out := &in.TotalGists, &out.TotalGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PrivateGists != nil {
		in, out := &in.PrivateGists, &out.PrivateGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PublicGists != nil {
		in, out := &in.PublicGists, &out.PublicGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistStats.
func (in *GistStats) DeepCopy() *GistStats {
	if in == nil {
		return nil
	}
	out := new(GistStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GistsService) DeepCopyInto(out *GistsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GistsService.
func (in *GistsService) DeepCopy() *GistsService {
	if in == nil {
		return nil
	}
	out := new(GistsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitObject) DeepCopyInto(out *GitObject) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitObject.
func (in *GitObject) DeepCopy() *GitObject {
	if in == nil {
		return nil
	}
	out := new(GitObject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitService) DeepCopyInto(out *GitService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitService.
func (in *GitService) DeepCopy() *GitService {
	if in == nil {
		return nil
	}
	out := new(GitService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Gitignore) DeepCopyInto(out *Gitignore) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Gitignore.
func (in *Gitignore) DeepCopy() *Gitignore {
	if in == nil {
		return nil
	}
	out := new(Gitignore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GitignoresService) DeepCopyInto(out *GitignoresService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GitignoresService.
func (in *GitignoresService) DeepCopy() *GitignoresService {
	if in == nil {
		return nil
	}
	out := new(GitignoresService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GollumEvent) DeepCopyInto(out *GollumEvent) {
	*out = *in
	if in.Pages != nil {
		in, out := &in.Pages, &out.Pages
		*out = make([]*Page, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Page)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GollumEvent.
func (in *GollumEvent) DeepCopy() *GollumEvent {
	if in == nil {
		return nil
	}
	out := new(GollumEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Grant) DeepCopyInto(out *Grant) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.App != nil {
		in, out := &in.App, &out.App
		if *in == nil {
			*out = nil
		} else {
			*out = new(AuthorizationApp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Scopes != nil {
		in, out := &in.Scopes, &out.Scopes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Grant.
func (in *Grant) DeepCopy() *Grant {
	if in == nil {
		return nil
	}
	out := new(Grant)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Hook) DeepCopyInto(out *Hook) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make(map[string]interface{}, len(*in))
		for key, val := range *in {
			if val == nil {
				(*out)[key] = nil
			} else {
				(*out)[key] = val.DeepCopyinterface{}()
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Hook.
func (in *Hook) DeepCopy() *Hook {
	if in == nil {
		return nil
	}
	out := new(Hook)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HookStats) DeepCopyInto(out *HookStats) {
	*out = *in
	if in.TotalHooks != nil {
		in, out := &in.TotalHooks, &out.TotalHooks
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ActiveHooks != nil {
		in, out := &in.ActiveHooks, &out.ActiveHooks
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.InactiveHooks != nil {
		in, out := &in.InactiveHooks, &out.InactiveHooks
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HookStats.
func (in *HookStats) DeepCopy() *HookStats {
	if in == nil {
		return nil
	}
	out := new(HookStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Import) DeepCopyInto(out *Import) {
	*out = *in
	if in.VCSURL != nil {
		in, out := &in.VCSURL, &out.VCSURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.VCS != nil {
		in, out := &in.VCS, &out.VCS
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.VCSUsername != nil {
		in, out := &in.VCSUsername, &out.VCSUsername
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.VCSPassword != nil {
		in, out := &in.VCSPassword, &out.VCSPassword
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TFVCProject != nil {
		in, out := &in.TFVCProject, &out.TFVCProject
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UseLFS != nil {
		in, out := &in.UseLFS, &out.UseLFS
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HasLargeFiles != nil {
		in, out := &in.HasLargeFiles, &out.HasLargeFiles
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.LargeFilesSize != nil {
		in, out := &in.LargeFilesSize, &out.LargeFilesSize
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.LargeFilesCount != nil {
		in, out := &in.LargeFilesCount, &out.LargeFilesCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitCount != nil {
		in, out := &in.CommitCount, &out.CommitCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.StatusText != nil {
		in, out := &in.StatusText, &out.StatusText
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AuthorsCount != nil {
		in, out := &in.AuthorsCount, &out.AuthorsCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Percent != nil {
		in, out := &in.Percent, &out.Percent
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PushPercent != nil {
		in, out := &in.PushPercent, &out.PushPercent
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AuthorsURL != nil {
		in, out := &in.AuthorsURL, &out.AuthorsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FailedStep != nil {
		in, out := &in.FailedStep, &out.FailedStep
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HumanName != nil {
		in, out := &in.HumanName, &out.HumanName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ProjectChoices != nil {
		in, out := &in.ProjectChoices, &out.ProjectChoices
		*out = make([]Import, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Import.
func (in *Import) DeepCopy() *Import {
	if in == nil {
		return nil
	}
	out := new(Import)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Installation) DeepCopyInto(out *Installation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.TargetID != nil {
		in, out := &in.TargetID, &out.TargetID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.AccessTokensURL != nil {
		in, out := &in.AccessTokensURL, &out.AccessTokensURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoriesURL != nil {
		in, out := &in.RepositoriesURL, &out.RepositoriesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TargetType != nil {
		in, out := &in.TargetType, &out.TargetType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SingleFileName != nil {
		in, out := &in.SingleFileName, &out.SingleFileName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositorySelection != nil {
		in, out := &in.RepositorySelection, &out.RepositorySelection
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		if *in == nil {
			*out = nil
		} else {
			*out = new(InstallationPermissions)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Installation.
func (in *Installation) DeepCopy() *Installation {
	if in == nil {
		return nil
	}
	out := new(Installation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationEvent) DeepCopyInto(out *InstallationEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*Repository, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Repository)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationEvent.
func (in *InstallationEvent) DeepCopy() *InstallationEvent {
	if in == nil {
		return nil
	}
	out := new(InstallationEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationPermissions) DeepCopyInto(out *InstallationPermissions) {
	*out = *in
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Contents != nil {
		in, out := &in.Contents, &out.Contents
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Issues != nil {
		in, out := &in.Issues, &out.Issues
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SingleFile != nil {
		in, out := &in.SingleFile, &out.SingleFile
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationPermissions.
func (in *InstallationPermissions) DeepCopy() *InstallationPermissions {
	if in == nil {
		return nil
	}
	out := new(InstallationPermissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationRepositoriesEvent) DeepCopyInto(out *InstallationRepositoriesEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoriesAdded != nil {
		in, out := &in.RepositoriesAdded, &out.RepositoriesAdded
		*out = make([]*Repository, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Repository)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.RepositoriesRemoved != nil {
		in, out := &in.RepositoriesRemoved, &out.RepositoriesRemoved
		*out = make([]*Repository, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Repository)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.RepositorySelection != nil {
		in, out := &in.RepositorySelection, &out.RepositorySelection
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationRepositoriesEvent.
func (in *InstallationRepositoriesEvent) DeepCopy() *InstallationRepositoriesEvent {
	if in == nil {
		return nil
	}
	out := new(InstallationRepositoriesEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InstallationToken) DeepCopyInto(out *InstallationToken) {
	*out = *in
	if in.Token != nil {
		in, out := &in.Token, &out.Token
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ExpiresAt != nil {
		in, out := &in.ExpiresAt, &out.ExpiresAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InstallationToken.
func (in *InstallationToken) DeepCopy() *InstallationToken {
	if in == nil {
		return nil
	}
	out := new(InstallationToken)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Invitation) DeepCopyInto(out *Invitation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Inviter != nil {
		in, out := &in.Inviter, &out.Inviter
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.TeamCount != nil {
		in, out := &in.TeamCount, &out.TeamCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.InvitationTeamURL != nil {
		in, out := &in.InvitationTeamURL, &out.InvitationTeamURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Invitation.
func (in *Invitation) DeepCopy() *Invitation {
	if in == nil {
		return nil
	}
	out := new(Invitation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Issue) DeepCopyInto(out *Issue) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Locked != nil {
		in, out := &in.Locked, &out.Locked
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]Label, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ClosedAt != nil {
		in, out := &in.ClosedAt, &out.ClosedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ClosedBy != nil {
		in, out := &in.ClosedBy, &out.ClosedBy
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LabelsURL != nil {
		in, out := &in.LabelsURL, &out.LabelsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(Milestone)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequestLinks != nil {
		in, out := &in.PullRequestLinks, &out.PullRequestLinks
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestLinks)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reactions != nil {
		in, out := &in.Reactions, &out.Reactions
		if *in == nil {
			*out = nil
		} else {
			*out = new(Reactions)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assignees != nil {
		in, out := &in.Assignees, &out.Assignees
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TextMatches != nil {
		in, out := &in.TextMatches, &out.TextMatches
		*out = make([]TextMatch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Issue.
func (in *Issue) DeepCopy() *Issue {
	if in == nil {
		return nil
	}
	out := new(Issue)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueComment) DeepCopyInto(out *IssueComment) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reactions != nil {
		in, out := &in.Reactions, &out.Reactions
		if *in == nil {
			*out = nil
		} else {
			*out = new(Reactions)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.AuthorAssociation != nil {
		in, out := &in.AuthorAssociation, &out.AuthorAssociation
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssueURL != nil {
		in, out := &in.IssueURL, &out.IssueURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueComment.
func (in *IssueComment) DeepCopy() *IssueComment {
	if in == nil {
		return nil
	}
	out := new(IssueComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueCommentEvent) DeepCopyInto(out *IssueCommentEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Issue != nil {
		in, out := &in.Issue, &out.Issue
		if *in == nil {
			*out = nil
		} else {
			*out = new(Issue)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		if *in == nil {
			*out = nil
		} else {
			*out = new(IssueComment)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueCommentEvent.
func (in *IssueCommentEvent) DeepCopy() *IssueCommentEvent {
	if in == nil {
		return nil
	}
	out := new(IssueCommentEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueEvent) DeepCopyInto(out *IssueEvent) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Actor != nil {
		in, out := &in.Actor, &out.Actor
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Event != nil {
		in, out := &in.Event, &out.Event
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Issue != nil {
		in, out := &in.Issue, &out.Issue
		if *in == nil {
			*out = nil
		} else {
			*out = new(Issue)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assigner != nil {
		in, out := &in.Assigner, &out.Assigner
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(Milestone)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(Label)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Rename != nil {
		in, out := &in.Rename, &out.Rename
		if *in == nil {
			*out = nil
		} else {
			*out = new(Rename)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueEvent.
func (in *IssueEvent) DeepCopy() *IssueEvent {
	if in == nil {
		return nil
	}
	out := new(IssueEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueListByRepoOptions) DeepCopyInto(out *IssueListByRepoOptions) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	in.Since.DeepCopyInto(&out.Since)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueListByRepoOptions.
func (in *IssueListByRepoOptions) DeepCopy() *IssueListByRepoOptions {
	if in == nil {
		return nil
	}
	out := new(IssueListByRepoOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueListCommentsOptions) DeepCopyInto(out *IssueListCommentsOptions) {
	*out = *in
	in.Since.DeepCopyInto(&out.Since)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueListCommentsOptions.
func (in *IssueListCommentsOptions) DeepCopy() *IssueListCommentsOptions {
	if in == nil {
		return nil
	}
	out := new(IssueListCommentsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueListOptions) DeepCopyInto(out *IssueListOptions) {
	*out = *in
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	in.Since.DeepCopyInto(&out.Since)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueListOptions.
func (in *IssueListOptions) DeepCopy() *IssueListOptions {
	if in == nil {
		return nil
	}
	out := new(IssueListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueRequest) DeepCopyInto(out *IssueRequest) {
	*out = *in
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Assignees != nil {
		in, out := &in.Assignees, &out.Assignees
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueRequest.
func (in *IssueRequest) DeepCopy() *IssueRequest {
	if in == nil {
		return nil
	}
	out := new(IssueRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssueStats) DeepCopyInto(out *IssueStats) {
	*out = *in
	if in.TotalIssues != nil {
		in, out := &in.TotalIssues, &out.TotalIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OpenIssues != nil {
		in, out := &in.OpenIssues, &out.OpenIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ClosedIssues != nil {
		in, out := &in.ClosedIssues, &out.ClosedIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssueStats.
func (in *IssueStats) DeepCopy() *IssueStats {
	if in == nil {
		return nil
	}
	out := new(IssueStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssuesEvent) DeepCopyInto(out *IssuesEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Issue != nil {
		in, out := &in.Issue, &out.Issue
		if *in == nil {
			*out = nil
		} else {
			*out = new(Issue)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(Label)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssuesEvent.
func (in *IssuesEvent) DeepCopy() *IssuesEvent {
	if in == nil {
		return nil
	}
	out := new(IssuesEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssuesSearchResult) DeepCopyInto(out *IssuesSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Issues != nil {
		in, out := &in.Issues, &out.Issues
		*out = make([]Issue, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssuesSearchResult.
func (in *IssuesSearchResult) DeepCopy() *IssuesSearchResult {
	if in == nil {
		return nil
	}
	out := new(IssuesSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *IssuesService) DeepCopyInto(out *IssuesService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new IssuesService.
func (in *IssuesService) DeepCopy() *IssuesService {
	if in == nil {
		return nil
	}
	out := new(IssuesService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Key) DeepCopyInto(out *Key) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReadOnly != nil {
		in, out := &in.ReadOnly, &out.ReadOnly
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Key.
func (in *Key) DeepCopy() *Key {
	if in == nil {
		return nil
	}
	out := new(Key)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Label) DeepCopyInto(out *Label) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Color != nil {
		in, out := &in.Color, &out.Color
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Label.
func (in *Label) DeepCopy() *Label {
	if in == nil {
		return nil
	}
	out := new(Label)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelEvent) DeepCopyInto(out *LabelEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(Label)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelEvent.
func (in *LabelEvent) DeepCopy() *LabelEvent {
	if in == nil {
		return nil
	}
	out := new(LabelEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelResult) DeepCopyInto(out *LabelResult) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Color != nil {
		in, out := &in.Color, &out.Color
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Default != nil {
		in, out := &in.Default, &out.Default
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Score != nil {
		in, out := &in.Score, &out.Score
		if *in == nil {
			*out = nil
		} else {
			*out = new(float64)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelResult.
func (in *LabelResult) DeepCopy() *LabelResult {
	if in == nil {
		return nil
	}
	out := new(LabelResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsSearchResult) DeepCopyInto(out *LabelsSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*LabelResult, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(LabelResult)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsSearchResult.
func (in *LabelsSearchResult) DeepCopy() *LabelsSearchResult {
	if in == nil {
		return nil
	}
	out := new(LabelsSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LargeFile) DeepCopyInto(out *LargeFile) {
	*out = *in
	if in.RefName != nil {
		in, out := &in.RefName, &out.RefName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OID != nil {
		in, out := &in.OID, &out.OID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LargeFile.
func (in *LargeFile) DeepCopy() *LargeFile {
	if in == nil {
		return nil
	}
	out := new(LargeFile)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *License) DeepCopyInto(out *License) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SPDXID != nil {
		in, out := &in.SPDXID, &out.SPDXID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Featured != nil {
		in, out := &in.Featured, &out.Featured
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Implementation != nil {
		in, out := &in.Implementation, &out.Implementation
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Limitations != nil {
		in, out := &in.Limitations, &out.Limitations
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new License.
func (in *License) DeepCopy() *License {
	if in == nil {
		return nil
	}
	out := new(License)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LicensesService) DeepCopyInto(out *LicensesService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LicensesService.
func (in *LicensesService) DeepCopy() *LicensesService {
	if in == nil {
		return nil
	}
	out := new(LicensesService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListCheckRunsOptions) DeepCopyInto(out *ListCheckRunsOptions) {
	*out = *in
	if in.CheckName != nil {
		in, out := &in.CheckName, &out.CheckName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListCheckRunsOptions.
func (in *ListCheckRunsOptions) DeepCopy() *ListCheckRunsOptions {
	if in == nil {
		return nil
	}
	out := new(ListCheckRunsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListCheckRunsResults) DeepCopyInto(out *ListCheckRunsResults) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CheckRuns != nil {
		in, out := &in.CheckRuns, &out.CheckRuns
		*out = make([]*CheckRun, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(CheckRun)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListCheckRunsResults.
func (in *ListCheckRunsResults) DeepCopy() *ListCheckRunsResults {
	if in == nil {
		return nil
	}
	out := new(ListCheckRunsResults)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListCheckSuiteOptions) DeepCopyInto(out *ListCheckSuiteOptions) {
	*out = *in
	if in.CheckName != nil {
		in, out := &in.CheckName, &out.CheckName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AppID != nil {
		in, out := &in.AppID, &out.AppID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListCheckSuiteOptions.
func (in *ListCheckSuiteOptions) DeepCopy() *ListCheckSuiteOptions {
	if in == nil {
		return nil
	}
	out := new(ListCheckSuiteOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListCheckSuiteResults) DeepCopyInto(out *ListCheckSuiteResults) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CheckSuites != nil {
		in, out := &in.CheckSuites, &out.CheckSuites
		*out = make([]*CheckSuite, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(CheckSuite)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListCheckSuiteResults.
func (in *ListCheckSuiteResults) DeepCopy() *ListCheckSuiteResults {
	if in == nil {
		return nil
	}
	out := new(ListCheckSuiteResults)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListCollaboratorsOptions) DeepCopyInto(out *ListCollaboratorsOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListCollaboratorsOptions.
func (in *ListCollaboratorsOptions) DeepCopy() *ListCollaboratorsOptions {
	if in == nil {
		return nil
	}
	out := new(ListCollaboratorsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListContributorsOptions) DeepCopyInto(out *ListContributorsOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListContributorsOptions.
func (in *ListContributorsOptions) DeepCopy() *ListContributorsOptions {
	if in == nil {
		return nil
	}
	out := new(ListContributorsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListMembersOptions) DeepCopyInto(out *ListMembersOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListMembersOptions.
func (in *ListMembersOptions) DeepCopy() *ListMembersOptions {
	if in == nil {
		return nil
	}
	out := new(ListMembersOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListOptions) DeepCopyInto(out *ListOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListOptions.
func (in *ListOptions) DeepCopy() *ListOptions {
	if in == nil {
		return nil
	}
	out := new(ListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListOrgMembershipsOptions) DeepCopyInto(out *ListOrgMembershipsOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListOrgMembershipsOptions.
func (in *ListOrgMembershipsOptions) DeepCopy() *ListOrgMembershipsOptions {
	if in == nil {
		return nil
	}
	out := new(ListOrgMembershipsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ListOutsideCollaboratorsOptions) DeepCopyInto(out *ListOutsideCollaboratorsOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ListOutsideCollaboratorsOptions.
func (in *ListOutsideCollaboratorsOptions) DeepCopy() *ListOutsideCollaboratorsOptions {
	if in == nil {
		return nil
	}
	out := new(ListOutsideCollaboratorsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarkdownOptions) DeepCopyInto(out *MarkdownOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarkdownOptions.
func (in *MarkdownOptions) DeepCopy() *MarkdownOptions {
	if in == nil {
		return nil
	}
	out := new(MarkdownOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarketplacePlan) DeepCopyInto(out *MarketplacePlan) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AccountsURL != nil {
		in, out := &in.AccountsURL, &out.AccountsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MonthlyPriceInCents != nil {
		in, out := &in.MonthlyPriceInCents, &out.MonthlyPriceInCents
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.YearlyPriceInCents != nil {
		in, out := &in.YearlyPriceInCents, &out.YearlyPriceInCents
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PriceModel != nil {
		in, out := &in.PriceModel, &out.PriceModel
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UnitName != nil {
		in, out := &in.UnitName, &out.UnitName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Bullets != nil {
		in, out := &in.Bullets, &out.Bullets
		if *in == nil {
			*out = nil
		} else {
			*out = new([]string)
			if **in != nil {
				in, out := *in, *out
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarketplacePlan.
func (in *MarketplacePlan) DeepCopy() *MarketplacePlan {
	if in == nil {
		return nil
	}
	out := new(MarketplacePlan)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarketplacePlanAccount) DeepCopyInto(out *MarketplacePlanAccount) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OrganizationBillingEmail != nil {
		in, out := &in.OrganizationBillingEmail, &out.OrganizationBillingEmail
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MarketplacePurchase != nil {
		in, out := &in.MarketplacePurchase, &out.MarketplacePurchase
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplacePurchase)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarketplacePlanAccount.
func (in *MarketplacePlanAccount) DeepCopy() *MarketplacePlanAccount {
	if in == nil {
		return nil
	}
	out := new(MarketplacePlanAccount)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarketplacePurchase) DeepCopyInto(out *MarketplacePurchase) {
	*out = *in
	if in.BillingCycle != nil {
		in, out := &in.BillingCycle, &out.BillingCycle
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NextBillingDate != nil {
		in, out := &in.NextBillingDate, &out.NextBillingDate
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UnitCount != nil {
		in, out := &in.UnitCount, &out.UnitCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplacePlan)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Account != nil {
		in, out := &in.Account, &out.Account
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplacePlanAccount)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarketplacePurchase.
func (in *MarketplacePurchase) DeepCopy() *MarketplacePurchase {
	if in == nil {
		return nil
	}
	out := new(MarketplacePurchase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarketplacePurchaseEvent) DeepCopyInto(out *MarketplacePurchaseEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EffectiveDate != nil {
		in, out := &in.EffectiveDate, &out.EffectiveDate
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MarketplacePurchase != nil {
		in, out := &in.MarketplacePurchase, &out.MarketplacePurchase
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplacePurchase)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PreviousMarketplacePurchase != nil {
		in, out := &in.PreviousMarketplacePurchase, &out.PreviousMarketplacePurchase
		if *in == nil {
			*out = nil
		} else {
			*out = new(MarketplacePurchase)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarketplacePurchaseEvent.
func (in *MarketplacePurchaseEvent) DeepCopy() *MarketplacePurchaseEvent {
	if in == nil {
		return nil
	}
	out := new(MarketplacePurchaseEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MarketplaceService) DeepCopyInto(out *MarketplaceService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MarketplaceService.
func (in *MarketplaceService) DeepCopy() *MarketplaceService {
	if in == nil {
		return nil
	}
	out := new(MarketplaceService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Match) DeepCopyInto(out *Match) {
	*out = *in
	if in.Text != nil {
		in, out := &in.Text, &out.Text
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Indices != nil {
		in, out := &in.Indices, &out.Indices
		*out = make([]int, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Match.
func (in *Match) DeepCopy() *Match {
	if in == nil {
		return nil
	}
	out := new(Match)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MemberEvent) DeepCopyInto(out *MemberEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MemberEvent.
func (in *MemberEvent) DeepCopy() *MemberEvent {
	if in == nil {
		return nil
	}
	out := new(MemberEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Membership) DeepCopyInto(out *Membership) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OrganizationURL != nil {
		in, out := &in.OrganizationURL, &out.OrganizationURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Membership.
func (in *Membership) DeepCopy() *Membership {
	if in == nil {
		return nil
	}
	out := new(Membership)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MembershipEvent) DeepCopyInto(out *MembershipEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Scope != nil {
		in, out := &in.Scope, &out.Scope
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Member != nil {
		in, out := &in.Member, &out.Member
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Team != nil {
		in, out := &in.Team, &out.Team
		if *in == nil {
			*out = nil
		} else {
			*out = new(Team)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MembershipEvent.
func (in *MembershipEvent) DeepCopy() *MembershipEvent {
	if in == nil {
		return nil
	}
	out := new(MembershipEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Metric) DeepCopyInto(out *Metric) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Metric.
func (in *Metric) DeepCopy() *Metric {
	if in == nil {
		return nil
	}
	out := new(Metric)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Migration) DeepCopyInto(out *Migration) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.GUID != nil {
		in, out := &in.GUID, &out.GUID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LockRepositories != nil {
		in, out := &in.LockRepositories, &out.LockRepositories
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ExcludeAttachments != nil {
		in, out := &in.ExcludeAttachments, &out.ExcludeAttachments
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*Repository, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Repository)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Migration.
func (in *Migration) DeepCopy() *Migration {
	if in == nil {
		return nil
	}
	out := new(Migration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationOptions) DeepCopyInto(out *MigrationOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationOptions.
func (in *MigrationOptions) DeepCopy() *MigrationOptions {
	if in == nil {
		return nil
	}
	out := new(MigrationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MigrationService) DeepCopyInto(out *MigrationService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MigrationService.
func (in *MigrationService) DeepCopy() *MigrationService {
	if in == nil {
		return nil
	}
	out := new(MigrationService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Milestone) DeepCopyInto(out *Milestone) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LabelsURL != nil {
		in, out := &in.LabelsURL, &out.LabelsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.OpenIssues != nil {
		in, out := &in.OpenIssues, &out.OpenIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ClosedIssues != nil {
		in, out := &in.ClosedIssues, &out.ClosedIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ClosedAt != nil {
		in, out := &in.ClosedAt, &out.ClosedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DueOn != nil {
		in, out := &in.DueOn, &out.DueOn
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Milestone.
func (in *Milestone) DeepCopy() *Milestone {
	if in == nil {
		return nil
	}
	out := new(Milestone)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MilestoneEvent) DeepCopyInto(out *MilestoneEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(Milestone)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MilestoneEvent.
func (in *MilestoneEvent) DeepCopy() *MilestoneEvent {
	if in == nil {
		return nil
	}
	out := new(MilestoneEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MilestoneListOptions) DeepCopyInto(out *MilestoneListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MilestoneListOptions.
func (in *MilestoneListOptions) DeepCopy() *MilestoneListOptions {
	if in == nil {
		return nil
	}
	out := new(MilestoneListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MilestoneStats) DeepCopyInto(out *MilestoneStats) {
	*out = *in
	if in.TotalMilestones != nil {
		in, out := &in.TotalMilestones, &out.TotalMilestones
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OpenMilestones != nil {
		in, out := &in.OpenMilestones, &out.OpenMilestones
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ClosedMilestones != nil {
		in, out := &in.ClosedMilestones, &out.ClosedMilestones
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MilestoneStats.
func (in *MilestoneStats) DeepCopy() *MilestoneStats {
	if in == nil {
		return nil
	}
	out := new(MilestoneStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NewPullRequest) DeepCopyInto(out *NewPullRequest) {
	*out = *in
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Head != nil {
		in, out := &in.Head, &out.Head
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Base != nil {
		in, out := &in.Base, &out.Base
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Issue != nil {
		in, out := &in.Issue, &out.Issue
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.MaintainerCanModify != nil {
		in, out := &in.MaintainerCanModify, &out.MaintainerCanModify
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NewPullRequest.
func (in *NewPullRequest) DeepCopy() *NewPullRequest {
	if in == nil {
		return nil
	}
	out := new(NewPullRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NewTeam) DeepCopyInto(out *NewTeam) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Maintainers != nil {
		in, out := &in.Maintainers, &out.Maintainers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RepoNames != nil {
		in, out := &in.RepoNames, &out.RepoNames
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ParentTeamID != nil {
		in, out := &in.ParentTeamID, &out.ParentTeamID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Privacy != nil {
		in, out := &in.Privacy, &out.Privacy
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LDAPDN != nil {
		in, out := &in.LDAPDN, &out.LDAPDN
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NewTeam.
func (in *NewTeam) DeepCopy() *NewTeam {
	if in == nil {
		return nil
	}
	out := new(NewTeam)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Notification) DeepCopyInto(out *Notification) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Subject != nil {
		in, out := &in.Subject, &out.Subject
		if *in == nil {
			*out = nil
		} else {
			*out = new(NotificationSubject)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reason != nil {
		in, out := &in.Reason, &out.Reason
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Unread != nil {
		in, out := &in.Unread, &out.Unread
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.LastReadAt != nil {
		in, out := &in.LastReadAt, &out.LastReadAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Notification.
func (in *Notification) DeepCopy() *Notification {
	if in == nil {
		return nil
	}
	out := new(Notification)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationListOptions) DeepCopyInto(out *NotificationListOptions) {
	*out = *in
	in.Since.DeepCopyInto(&out.Since)
	in.Before.DeepCopyInto(&out.Before)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationListOptions.
func (in *NotificationListOptions) DeepCopy() *NotificationListOptions {
	if in == nil {
		return nil
	}
	out := new(NotificationListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NotificationSubject) DeepCopyInto(out *NotificationSubject) {
	*out = *in
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LatestCommentURL != nil {
		in, out := &in.LatestCommentURL, &out.LatestCommentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NotificationSubject.
func (in *NotificationSubject) DeepCopy() *NotificationSubject {
	if in == nil {
		return nil
	}
	out := new(NotificationSubject)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgBlockEvent) DeepCopyInto(out *OrgBlockEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BlockedUser != nil {
		in, out := &in.BlockedUser, &out.BlockedUser
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgBlockEvent.
func (in *OrgBlockEvent) DeepCopy() *OrgBlockEvent {
	if in == nil {
		return nil
	}
	out := new(OrgBlockEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrgStats) DeepCopyInto(out *OrgStats) {
	*out = *in
	if in.TotalOrgs != nil {
		in, out := &in.TotalOrgs, &out.TotalOrgs
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.DisabledOrgs != nil {
		in, out := &in.DisabledOrgs, &out.DisabledOrgs
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalTeams != nil {
		in, out := &in.TotalTeams, &out.TotalTeams
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalTeamMembers != nil {
		in, out := &in.TotalTeamMembers, &out.TotalTeamMembers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrgStats.
func (in *OrgStats) DeepCopy() *OrgStats {
	if in == nil {
		return nil
	}
	out := new(OrgStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Organization) DeepCopyInto(out *Organization) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Company != nil {
		in, out := &in.Company, &out.Company
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Blog != nil {
		in, out := &in.Blog, &out.Blog
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PublicRepos != nil {
		in, out := &in.PublicRepos, &out.PublicRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PublicGists != nil {
		in, out := &in.PublicGists, &out.PublicGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Followers != nil {
		in, out := &in.Followers, &out.Followers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Following != nil {
		in, out := &in.Following, &out.Following
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.TotalPrivateRepos != nil {
		in, out := &in.TotalPrivateRepos, &out.TotalPrivateRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OwnedPrivateRepos != nil {
		in, out := &in.OwnedPrivateRepos, &out.OwnedPrivateRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PrivateGists != nil {
		in, out := &in.PrivateGists, &out.PrivateGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.DiskUsage != nil {
		in, out := &in.DiskUsage, &out.DiskUsage
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Collaborators != nil {
		in, out := &in.Collaborators, &out.Collaborators
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.BillingEmail != nil {
		in, out := &in.BillingEmail, &out.BillingEmail
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		if *in == nil {
			*out = nil
		} else {
			*out = new(Plan)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HooksURL != nil {
		in, out := &in.HooksURL, &out.HooksURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssuesURL != nil {
		in, out := &in.IssuesURL, &out.IssuesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MembersURL != nil {
		in, out := &in.MembersURL, &out.MembersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PublicMembersURL != nil {
		in, out := &in.PublicMembersURL, &out.PublicMembersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReposURL != nil {
		in, out := &in.ReposURL, &out.ReposURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Organization.
func (in *Organization) DeepCopy() *Organization {
	if in == nil {
		return nil
	}
	out := new(Organization)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationAddTeamMembershipOptions) DeepCopyInto(out *OrganizationAddTeamMembershipOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationAddTeamMembershipOptions.
func (in *OrganizationAddTeamMembershipOptions) DeepCopy() *OrganizationAddTeamMembershipOptions {
	if in == nil {
		return nil
	}
	out := new(OrganizationAddTeamMembershipOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationAddTeamRepoOptions) DeepCopyInto(out *OrganizationAddTeamRepoOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationAddTeamRepoOptions.
func (in *OrganizationAddTeamRepoOptions) DeepCopy() *OrganizationAddTeamRepoOptions {
	if in == nil {
		return nil
	}
	out := new(OrganizationAddTeamRepoOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationEvent) DeepCopyInto(out *OrganizationEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Invitation != nil {
		in, out := &in.Invitation, &out.Invitation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Invitation)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Membership != nil {
		in, out := &in.Membership, &out.Membership
		if *in == nil {
			*out = nil
		} else {
			*out = new(Membership)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationEvent.
func (in *OrganizationEvent) DeepCopy() *OrganizationEvent {
	if in == nil {
		return nil
	}
	out := new(OrganizationEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationListTeamMembersOptions) DeepCopyInto(out *OrganizationListTeamMembersOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationListTeamMembersOptions.
func (in *OrganizationListTeamMembersOptions) DeepCopy() *OrganizationListTeamMembersOptions {
	if in == nil {
		return nil
	}
	out := new(OrganizationListTeamMembersOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationsListOptions) DeepCopyInto(out *OrganizationsListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationsListOptions.
func (in *OrganizationsListOptions) DeepCopy() *OrganizationsListOptions {
	if in == nil {
		return nil
	}
	out := new(OrganizationsListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OrganizationsService) DeepCopyInto(out *OrganizationsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OrganizationsService.
func (in *OrganizationsService) DeepCopy() *OrganizationsService {
	if in == nil {
		return nil
	}
	out := new(OrganizationsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Page) DeepCopyInto(out *Page) {
	*out = *in
	if in.PageName != nil {
		in, out := &in.PageName, &out.PageName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Summary != nil {
		in, out := &in.Summary, &out.Summary
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Page.
func (in *Page) DeepCopy() *Page {
	if in == nil {
		return nil
	}
	out := new(Page)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PageBuildEvent) DeepCopyInto(out *PageBuildEvent) {
	*out = *in
	if in.Build != nil {
		in, out := &in.Build, &out.Build
		if *in == nil {
			*out = nil
		} else {
			*out = new(PagesBuild)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PageBuildEvent.
func (in *PageBuildEvent) DeepCopy() *PageBuildEvent {
	if in == nil {
		return nil
	}
	out := new(PageBuildEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PageStats) DeepCopyInto(out *PageStats) {
	*out = *in
	if in.TotalPages != nil {
		in, out := &in.TotalPages, &out.TotalPages
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PageStats.
func (in *PageStats) DeepCopy() *PageStats {
	if in == nil {
		return nil
	}
	out := new(PageStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Pages) DeepCopyInto(out *Pages) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CNAME != nil {
		in, out := &in.CNAME, &out.CNAME
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Custom404 != nil {
		in, out := &in.Custom404, &out.Custom404
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pages.
func (in *Pages) DeepCopy() *Pages {
	if in == nil {
		return nil
	}
	out := new(Pages)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PagesBuild) DeepCopyInto(out *PagesBuild) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Error != nil {
		in, out := &in.Error, &out.Error
		if *in == nil {
			*out = nil
		} else {
			*out = new(PagesError)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Pusher != nil {
		in, out := &in.Pusher, &out.Pusher
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PagesBuild.
func (in *PagesBuild) DeepCopy() *PagesBuild {
	if in == nil {
		return nil
	}
	out := new(PagesBuild)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PagesError) DeepCopyInto(out *PagesError) {
	*out = *in
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PagesError.
func (in *PagesError) DeepCopy() *PagesError {
	if in == nil {
		return nil
	}
	out := new(PagesError)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PingEvent) DeepCopyInto(out *PingEvent) {
	*out = *in
	if in.Zen != nil {
		in, out := &in.Zen, &out.Zen
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HookID != nil {
		in, out := &in.HookID, &out.HookID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Hook != nil {
		in, out := &in.Hook, &out.Hook
		if *in == nil {
			*out = nil
		} else {
			*out = new(Hook)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PingEvent.
func (in *PingEvent) DeepCopy() *PingEvent {
	if in == nil {
		return nil
	}
	out := new(PingEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Plan) DeepCopyInto(out *Plan) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Space != nil {
		in, out := &in.Space, &out.Space
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Collaborators != nil {
		in, out := &in.Collaborators, &out.Collaborators
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PrivateRepos != nil {
		in, out := &in.PrivateRepos, &out.PrivateRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Plan.
func (in *Plan) DeepCopy() *Plan {
	if in == nil {
		return nil
	}
	out := new(Plan)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PreferenceList) DeepCopyInto(out *PreferenceList) {
	*out = *in
	if in.AutoTriggerChecks != nil {
		in, out := &in.AutoTriggerChecks, &out.AutoTriggerChecks
		*out = make([]*AutoTriggerCheck, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(AutoTriggerCheck)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PreferenceList.
func (in *PreferenceList) DeepCopy() *PreferenceList {
	if in == nil {
		return nil
	}
	out := new(PreferenceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Project) DeepCopyInto(out *Project) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OwnerURL != nil {
		in, out := &in.OwnerURL, &out.OwnerURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Project.
func (in *Project) DeepCopy() *Project {
	if in == nil {
		return nil
	}
	out := new(Project)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCard) DeepCopyInto(out *ProjectCard) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ColumnURL != nil {
		in, out := &in.ColumnURL, &out.ColumnURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ContentURL != nil {
		in, out := &in.ContentURL, &out.ContentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Archived != nil {
		in, out := &in.Archived, &out.Archived
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ColumnID != nil {
		in, out := &in.ColumnID, &out.ColumnID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCard.
func (in *ProjectCard) DeepCopy() *ProjectCard {
	if in == nil {
		return nil
	}
	out := new(ProjectCard)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCardChange) DeepCopyInto(out *ProjectCardChange) {
	*out = *in
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCardChange.
func (in *ProjectCardChange) DeepCopy() *ProjectCardChange {
	if in == nil {
		return nil
	}
	out := new(ProjectCardChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCardEvent) DeepCopyInto(out *ProjectCardEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectCardChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.AfterID != nil {
		in, out := &in.AfterID, &out.AfterID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.ProjectCard != nil {
		in, out := &in.ProjectCard, &out.ProjectCard
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectCard)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCardEvent.
func (in *ProjectCardEvent) DeepCopy() *ProjectCardEvent {
	if in == nil {
		return nil
	}
	out := new(ProjectCardEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCardListOptions) DeepCopyInto(out *ProjectCardListOptions) {
	*out = *in
	if in.ArchivedState != nil {
		in, out := &in.ArchivedState, &out.ArchivedState
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCardListOptions.
func (in *ProjectCardListOptions) DeepCopy() *ProjectCardListOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectCardListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCardMoveOptions) DeepCopyInto(out *ProjectCardMoveOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCardMoveOptions.
func (in *ProjectCardMoveOptions) DeepCopy() *ProjectCardMoveOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectCardMoveOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectCardOptions) DeepCopyInto(out *ProjectCardOptions) {
	*out = *in
	if in.Archived != nil {
		in, out := &in.Archived, &out.Archived
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectCardOptions.
func (in *ProjectCardOptions) DeepCopy() *ProjectCardOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectCardOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectChange) DeepCopyInto(out *ProjectChange) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectChange.
func (in *ProjectChange) DeepCopy() *ProjectChange {
	if in == nil {
		return nil
	}
	out := new(ProjectChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectColumn) DeepCopyInto(out *ProjectColumn) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ProjectURL != nil {
		in, out := &in.ProjectURL, &out.ProjectURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectColumn.
func (in *ProjectColumn) DeepCopy() *ProjectColumn {
	if in == nil {
		return nil
	}
	out := new(ProjectColumn)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectColumnChange) DeepCopyInto(out *ProjectColumnChange) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectColumnChange.
func (in *ProjectColumnChange) DeepCopy() *ProjectColumnChange {
	if in == nil {
		return nil
	}
	out := new(ProjectColumnChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectColumnEvent) DeepCopyInto(out *ProjectColumnEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectColumnChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.AfterID != nil {
		in, out := &in.AfterID, &out.AfterID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.ProjectColumn != nil {
		in, out := &in.ProjectColumn, &out.ProjectColumn
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectColumn)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectColumnEvent.
func (in *ProjectColumnEvent) DeepCopy() *ProjectColumnEvent {
	if in == nil {
		return nil
	}
	out := new(ProjectColumnEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectColumnMoveOptions) DeepCopyInto(out *ProjectColumnMoveOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectColumnMoveOptions.
func (in *ProjectColumnMoveOptions) DeepCopy() *ProjectColumnMoveOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectColumnMoveOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectColumnOptions) DeepCopyInto(out *ProjectColumnOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectColumnOptions.
func (in *ProjectColumnOptions) DeepCopy() *ProjectColumnOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectColumnOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectEvent) DeepCopyInto(out *ProjectEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(ProjectChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		if *in == nil {
			*out = nil
		} else {
			*out = new(Project)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectEvent.
func (in *ProjectEvent) DeepCopy() *ProjectEvent {
	if in == nil {
		return nil
	}
	out := new(ProjectEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectListOptions) DeepCopyInto(out *ProjectListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectListOptions.
func (in *ProjectListOptions) DeepCopy() *ProjectListOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectOptions) DeepCopyInto(out *ProjectOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectOptions.
func (in *ProjectOptions) DeepCopy() *ProjectOptions {
	if in == nil {
		return nil
	}
	out := new(ProjectOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProjectsService) DeepCopyInto(out *ProjectsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProjectsService.
func (in *ProjectsService) DeepCopy() *ProjectsService {
	if in == nil {
		return nil
	}
	out := new(ProjectsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Protection) DeepCopyInto(out *Protection) {
	*out = *in
	if in.RequiredStatusChecks != nil {
		in, out := &in.RequiredStatusChecks, &out.RequiredStatusChecks
		if *in == nil {
			*out = nil
		} else {
			*out = new(RequiredStatusChecks)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.RequiredPullRequestReviews != nil {
		in, out := &in.RequiredPullRequestReviews, &out.RequiredPullRequestReviews
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestReviewsEnforcement)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.EnforceAdmins != nil {
		in, out := &in.EnforceAdmins, &out.EnforceAdmins
		if *in == nil {
			*out = nil
		} else {
			*out = new(AdminEnforcement)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Restrictions != nil {
		in, out := &in.Restrictions, &out.Restrictions
		if *in == nil {
			*out = nil
		} else {
			*out = new(BranchRestrictions)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Protection.
func (in *Protection) DeepCopy() *Protection {
	if in == nil {
		return nil
	}
	out := new(Protection)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ProtectionRequest) DeepCopyInto(out *ProtectionRequest) {
	*out = *in
	if in.RequiredStatusChecks != nil {
		in, out := &in.RequiredStatusChecks, &out.RequiredStatusChecks
		if *in == nil {
			*out = nil
		} else {
			*out = new(RequiredStatusChecks)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.RequiredPullRequestReviews != nil {
		in, out := &in.RequiredPullRequestReviews, &out.RequiredPullRequestReviews
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestReviewsEnforcementRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Restrictions != nil {
		in, out := &in.Restrictions, &out.Restrictions
		if *in == nil {
			*out = nil
		} else {
			*out = new(BranchRestrictionsRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ProtectionRequest.
func (in *ProtectionRequest) DeepCopy() *ProtectionRequest {
	if in == nil {
		return nil
	}
	out := new(ProtectionRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PublicEvent) DeepCopyInto(out *PublicEvent) {
	*out = *in
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PublicEvent.
func (in *PublicEvent) DeepCopy() *PublicEvent {
	if in == nil {
		return nil
	}
	out := new(PublicEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequest) DeepCopyInto(out *PullRequest) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ClosedAt != nil {
		in, out := &in.ClosedAt, &out.ClosedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MergedAt != nil {
		in, out := &in.MergedAt, &out.MergedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]*Label, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Label)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Merged != nil {
		in, out := &in.Merged, &out.Merged
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Mergeable != nil {
		in, out := &in.Mergeable, &out.Mergeable
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.MergeableState != nil {
		in, out := &in.MergeableState, &out.MergeableState
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MergedBy != nil {
		in, out := &in.MergedBy, &out.MergedBy
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MergeCommitSHA != nil {
		in, out := &in.MergeCommitSHA, &out.MergeCommitSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Additions != nil {
		in, out := &in.Additions, &out.Additions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Deletions != nil {
		in, out := &in.Deletions, &out.Deletions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ChangedFiles != nil {
		in, out := &in.ChangedFiles, &out.ChangedFiles
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssueURL != nil {
		in, out := &in.IssueURL, &out.IssueURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StatusesURL != nil {
		in, out := &in.StatusesURL, &out.StatusesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DiffURL != nil {
		in, out := &in.DiffURL, &out.DiffURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PatchURL != nil {
		in, out := &in.PatchURL, &out.PatchURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitsURL != nil {
		in, out := &in.CommitsURL, &out.CommitsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReviewCommentsURL != nil {
		in, out := &in.ReviewCommentsURL, &out.ReviewCommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReviewCommentURL != nil {
		in, out := &in.ReviewCommentURL, &out.ReviewCommentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assignees != nil {
		in, out := &in.Assignees, &out.Assignees
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(Milestone)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MaintainerCanModify != nil {
		in, out := &in.MaintainerCanModify, &out.MaintainerCanModify
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.AuthorAssociation != nil {
		in, out := &in.AuthorAssociation, &out.AuthorAssociation
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RequestedReviewers != nil {
		in, out := &in.RequestedReviewers, &out.RequestedReviewers
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Head != nil {
		in, out := &in.Head, &out.Head
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestBranch)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Base != nil {
		in, out := &in.Base, &out.Base
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestBranch)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequest.
func (in *PullRequest) DeepCopy() *PullRequest {
	if in == nil {
		return nil
	}
	out := new(PullRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestBranch) DeepCopyInto(out *PullRequestBranch) {
	*out = *in
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestBranch.
func (in *PullRequestBranch) DeepCopy() *PullRequestBranch {
	if in == nil {
		return nil
	}
	out := new(PullRequestBranch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestComment) DeepCopyInto(out *PullRequestComment) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.InReplyTo != nil {
		in, out := &in.InReplyTo, &out.InReplyTo
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DiffHunk != nil {
		in, out := &in.DiffHunk, &out.DiffHunk
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PullRequestReviewID != nil {
		in, out := &in.PullRequestReviewID, &out.PullRequestReviewID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OriginalPosition != nil {
		in, out := &in.OriginalPosition, &out.OriginalPosition
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OriginalCommitID != nil {
		in, out := &in.OriginalCommitID, &out.OriginalCommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reactions != nil {
		in, out := &in.Reactions, &out.Reactions
		if *in == nil {
			*out = nil
		} else {
			*out = new(Reactions)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.AuthorAssociation != nil {
		in, out := &in.AuthorAssociation, &out.AuthorAssociation
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PullRequestURL != nil {
		in, out := &in.PullRequestURL, &out.PullRequestURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestComment.
func (in *PullRequestComment) DeepCopy() *PullRequestComment {
	if in == nil {
		return nil
	}
	out := new(PullRequestComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestEvent) DeepCopyInto(out *PullRequestEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.RequestedReviewer != nil {
		in, out := &in.RequestedReviewer, &out.RequestedReviewer
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(Label)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestEvent.
func (in *PullRequestEvent) DeepCopy() *PullRequestEvent {
	if in == nil {
		return nil
	}
	out := new(PullRequestEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestLinks) DeepCopyInto(out *PullRequestLinks) {
	*out = *in
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DiffURL != nil {
		in, out := &in.DiffURL, &out.DiffURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PatchURL != nil {
		in, out := &in.PatchURL, &out.PatchURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestLinks.
func (in *PullRequestLinks) DeepCopy() *PullRequestLinks {
	if in == nil {
		return nil
	}
	out := new(PullRequestLinks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestListCommentsOptions) DeepCopyInto(out *PullRequestListCommentsOptions) {
	*out = *in
	in.Since.DeepCopyInto(&out.Since)
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestListCommentsOptions.
func (in *PullRequestListCommentsOptions) DeepCopy() *PullRequestListCommentsOptions {
	if in == nil {
		return nil
	}
	out := new(PullRequestListCommentsOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestListOptions) DeepCopyInto(out *PullRequestListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestListOptions.
func (in *PullRequestListOptions) DeepCopy() *PullRequestListOptions {
	if in == nil {
		return nil
	}
	out := new(PullRequestListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestMergeResult) DeepCopyInto(out *PullRequestMergeResult) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Merged != nil {
		in, out := &in.Merged, &out.Merged
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestMergeResult.
func (in *PullRequestMergeResult) DeepCopy() *PullRequestMergeResult {
	if in == nil {
		return nil
	}
	out := new(PullRequestMergeResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestOptions) DeepCopyInto(out *PullRequestOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestOptions.
func (in *PullRequestOptions) DeepCopy() *PullRequestOptions {
	if in == nil {
		return nil
	}
	out := new(PullRequestOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReview) DeepCopyInto(out *PullRequestReview) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubmittedAt != nil {
		in, out := &in.SubmittedAt, &out.SubmittedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PullRequestURL != nil {
		in, out := &in.PullRequestURL, &out.PullRequestURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReview.
func (in *PullRequestReview) DeepCopy() *PullRequestReview {
	if in == nil {
		return nil
	}
	out := new(PullRequestReview)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewCommentEvent) DeepCopyInto(out *PullRequestReviewCommentEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestComment)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(EditChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewCommentEvent.
func (in *PullRequestReviewCommentEvent) DeepCopy() *PullRequestReviewCommentEvent {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewCommentEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewDismissalRequest) DeepCopyInto(out *PullRequestReviewDismissalRequest) {
	*out = *in
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewDismissalRequest.
func (in *PullRequestReviewDismissalRequest) DeepCopy() *PullRequestReviewDismissalRequest {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewDismissalRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewEvent) DeepCopyInto(out *PullRequestReviewEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Review != nil {
		in, out := &in.Review, &out.Review
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequestReview)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PullRequest != nil {
		in, out := &in.PullRequest, &out.PullRequest
		if *in == nil {
			*out = nil
		} else {
			*out = new(PullRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewEvent.
func (in *PullRequestReviewEvent) DeepCopy() *PullRequestReviewEvent {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewRequest) DeepCopyInto(out *PullRequestReviewRequest) {
	*out = *in
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Event != nil {
		in, out := &in.Event, &out.Event
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		*out = make([]*DraftReviewComment, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(DraftReviewComment)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewRequest.
func (in *PullRequestReviewRequest) DeepCopy() *PullRequestReviewRequest {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewsEnforcement) DeepCopyInto(out *PullRequestReviewsEnforcement) {
	*out = *in
	in.DismissalRestrictions.DeepCopyInto(&out.DismissalRestrictions)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewsEnforcement.
func (in *PullRequestReviewsEnforcement) DeepCopy() *PullRequestReviewsEnforcement {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewsEnforcement)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewsEnforcementRequest) DeepCopyInto(out *PullRequestReviewsEnforcementRequest) {
	*out = *in
	if in.DismissalRestrictionsRequest != nil {
		in, out := &in.DismissalRestrictionsRequest, &out.DismissalRestrictionsRequest
		if *in == nil {
			*out = nil
		} else {
			*out = new(DismissalRestrictionsRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewsEnforcementRequest.
func (in *PullRequestReviewsEnforcementRequest) DeepCopy() *PullRequestReviewsEnforcementRequest {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewsEnforcementRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestReviewsEnforcementUpdate) DeepCopyInto(out *PullRequestReviewsEnforcementUpdate) {
	*out = *in
	if in.DismissalRestrictionsRequest != nil {
		in, out := &in.DismissalRestrictionsRequest, &out.DismissalRestrictionsRequest
		if *in == nil {
			*out = nil
		} else {
			*out = new(DismissalRestrictionsRequest)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DismissStaleReviews != nil {
		in, out := &in.DismissStaleReviews, &out.DismissStaleReviews
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestReviewsEnforcementUpdate.
func (in *PullRequestReviewsEnforcementUpdate) DeepCopy() *PullRequestReviewsEnforcementUpdate {
	if in == nil {
		return nil
	}
	out := new(PullRequestReviewsEnforcementUpdate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequestsService) DeepCopyInto(out *PullRequestsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequestsService.
func (in *PullRequestsService) DeepCopy() *PullRequestsService {
	if in == nil {
		return nil
	}
	out := new(PullRequestsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullStats) DeepCopyInto(out *PullStats) {
	*out = *in
	if in.TotalPulls != nil {
		in, out := &in.TotalPulls, &out.TotalPulls
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.MergedPulls != nil {
		in, out := &in.MergedPulls, &out.MergedPulls
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.MergablePulls != nil {
		in, out := &in.MergablePulls, &out.MergablePulls
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.UnmergablePulls != nil {
		in, out := &in.UnmergablePulls, &out.UnmergablePulls
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullStats.
func (in *PullStats) DeepCopy() *PullStats {
	if in == nil {
		return nil
	}
	out := new(PullStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PunchCard) DeepCopyInto(out *PunchCard) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PunchCard.
func (in *PunchCard) DeepCopy() *PunchCard {
	if in == nil {
		return nil
	}
	out := new(PunchCard)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushEvent) DeepCopyInto(out *PushEvent) {
	*out = *in
	if in.PushID != nil {
		in, out := &in.PushID, &out.PushID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Head != nil {
		in, out := &in.Head, &out.Head
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		*out = make([]PushEventCommit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Before != nil {
		in, out := &in.Before, &out.Before
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DistinctSize != nil {
		in, out := &in.DistinctSize, &out.DistinctSize
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.After != nil {
		in, out := &in.After, &out.After
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Created != nil {
		in, out := &in.Created, &out.Created
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Deleted != nil {
		in, out := &in.Deleted, &out.Deleted
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Forced != nil {
		in, out := &in.Forced, &out.Forced
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.BaseRef != nil {
		in, out := &in.BaseRef, &out.BaseRef
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Compare != nil {
		in, out := &in.Compare, &out.Compare
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(PushEventRepository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.HeadCommit != nil {
		in, out := &in.HeadCommit, &out.HeadCommit
		if *in == nil {
			*out = nil
		} else {
			*out = new(PushEventCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Pusher != nil {
		in, out := &in.Pusher, &out.Pusher
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushEvent.
func (in *PushEvent) DeepCopy() *PushEvent {
	if in == nil {
		return nil
	}
	out := new(PushEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushEventCommit) DeepCopyInto(out *PushEventCommit) {
	*out = *in
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Distinct != nil {
		in, out := &in.Distinct, &out.Distinct
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TreeID != nil {
		in, out := &in.TreeID, &out.TreeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Added != nil {
		in, out := &in.Added, &out.Added
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Removed != nil {
		in, out := &in.Removed, &out.Removed
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Modified != nil {
		in, out := &in.Modified, &out.Modified
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushEventCommit.
func (in *PushEventCommit) DeepCopy() *PushEventCommit {
	if in == nil {
		return nil
	}
	out := new(PushEventCommit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushEventRepoOwner) DeepCopyInto(out *PushEventRepoOwner) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushEventRepoOwner.
func (in *PushEventRepoOwner) DeepCopy() *PushEventRepoOwner {
	if in == nil {
		return nil
	}
	out := new(PushEventRepoOwner)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PushEventRepository) DeepCopyInto(out *PushEventRepository) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		if *in == nil {
			*out = nil
		} else {
			*out = new(PushEventRepoOwner)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Private != nil {
		in, out := &in.Private, &out.Private
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Fork != nil {
		in, out := &in.Fork, &out.Fork
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PushedAt != nil {
		in, out := &in.PushedAt, &out.PushedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Homepage != nil {
		in, out := &in.Homepage, &out.Homepage
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.StargazersCount != nil {
		in, out := &in.StargazersCount, &out.StargazersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.WatchersCount != nil {
		in, out := &in.WatchersCount, &out.WatchersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HasIssues != nil {
		in, out := &in.HasIssues, &out.HasIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasDownloads != nil {
		in, out := &in.HasDownloads, &out.HasDownloads
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasWiki != nil {
		in, out := &in.HasWiki, &out.HasWiki
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasPages != nil {
		in, out := &in.HasPages, &out.HasPages
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ForksCount != nil {
		in, out := &in.ForksCount, &out.ForksCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OpenIssuesCount != nil {
		in, out := &in.OpenIssuesCount, &out.OpenIssuesCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.DefaultBranch != nil {
		in, out := &in.DefaultBranch, &out.DefaultBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MasterBranch != nil {
		in, out := &in.MasterBranch, &out.MasterBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ArchiveURL != nil {
		in, out := &in.ArchiveURL, &out.ArchiveURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StatusesURL != nil {
		in, out := &in.StatusesURL, &out.StatusesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SSHURL != nil {
		in, out := &in.SSHURL, &out.SSHURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CloneURL != nil {
		in, out := &in.CloneURL, &out.CloneURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SVNURL != nil {
		in, out := &in.SVNURL, &out.SVNURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PushEventRepository.
func (in *PushEventRepository) DeepCopy() *PushEventRepository {
	if in == nil {
		return nil
	}
	out := new(PushEventRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Rate) DeepCopyInto(out *Rate) {
	*out = *in
	in.Reset.DeepCopyInto(&out.Reset)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Rate.
func (in *Rate) DeepCopy() *Rate {
	if in == nil {
		return nil
	}
	out := new(Rate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RateLimitError) DeepCopyInto(out *RateLimitError) {
	*out = *in
	in.Rate.DeepCopyInto(&out.Rate)
	if in.Response != nil {
		in, out := &in.Response, &out.Response
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Response)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RateLimitError.
func (in *RateLimitError) DeepCopy() *RateLimitError {
	if in == nil {
		return nil
	}
	out := new(RateLimitError)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RateLimits) DeepCopyInto(out *RateLimits) {
	*out = *in
	if in.Core != nil {
		in, out := &in.Core, &out.Core
		if *in == nil {
			*out = nil
		} else {
			*out = new(Rate)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Search != nil {
		in, out := &in.Search, &out.Search
		if *in == nil {
			*out = nil
		} else {
			*out = new(Rate)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RateLimits.
func (in *RateLimits) DeepCopy() *RateLimits {
	if in == nil {
		return nil
	}
	out := new(RateLimits)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RawOptions) DeepCopyInto(out *RawOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RawOptions.
func (in *RawOptions) DeepCopy() *RawOptions {
	if in == nil {
		return nil
	}
	out := new(RawOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Reaction) DeepCopyInto(out *Reaction) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Reaction.
func (in *Reaction) DeepCopy() *Reaction {
	if in == nil {
		return nil
	}
	out := new(Reaction)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Reactions) DeepCopyInto(out *Reactions) {
	*out = *in
	if in.TotalCount != nil {
		in, out := &in.TotalCount, &out.TotalCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PlusOne != nil {
		in, out := &in.PlusOne, &out.PlusOne
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.MinusOne != nil {
		in, out := &in.MinusOne, &out.MinusOne
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Laugh != nil {
		in, out := &in.Laugh, &out.Laugh
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Confused != nil {
		in, out := &in.Confused, &out.Confused
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Heart != nil {
		in, out := &in.Heart, &out.Heart
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Hooray != nil {
		in, out := &in.Hooray, &out.Hooray
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Reactions.
func (in *Reactions) DeepCopy() *Reactions {
	if in == nil {
		return nil
	}
	out := new(Reactions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReactionsService) DeepCopyInto(out *ReactionsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReactionsService.
func (in *ReactionsService) DeepCopy() *ReactionsService {
	if in == nil {
		return nil
	}
	out := new(ReactionsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Reference) DeepCopyInto(out *Reference) {
	*out = *in
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Object != nil {
		in, out := &in.Object, &out.Object
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitObject)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Reference.
func (in *Reference) DeepCopy() *Reference {
	if in == nil {
		return nil
	}
	out := new(Reference)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReferenceListOptions) DeepCopyInto(out *ReferenceListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReferenceListOptions.
func (in *ReferenceListOptions) DeepCopy() *ReferenceListOptions {
	if in == nil {
		return nil
	}
	out := new(ReferenceListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReleaseAsset) DeepCopyInto(out *ReleaseAsset) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ContentType != nil {
		in, out := &in.ContentType, &out.ContentType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.DownloadCount != nil {
		in, out := &in.DownloadCount, &out.DownloadCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.BrowserDownloadURL != nil {
		in, out := &in.BrowserDownloadURL, &out.BrowserDownloadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Uploader != nil {
		in, out := &in.Uploader, &out.Uploader
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReleaseAsset.
func (in *ReleaseAsset) DeepCopy() *ReleaseAsset {
	if in == nil {
		return nil
	}
	out := new(ReleaseAsset)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReleaseEvent) DeepCopyInto(out *ReleaseEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Release != nil {
		in, out := &in.Release, &out.Release
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryRelease)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReleaseEvent.
func (in *ReleaseEvent) DeepCopy() *ReleaseEvent {
	if in == nil {
		return nil
	}
	out := new(ReleaseEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Rename) DeepCopyInto(out *Rename) {
	*out = *in
	if in.From != nil {
		in, out := &in.From, &out.From
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.To != nil {
		in, out := &in.To, &out.To
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Rename.
func (in *Rename) DeepCopy() *Rename {
	if in == nil {
		return nil
	}
	out := new(Rename)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepoStats) DeepCopyInto(out *RepoStats) {
	*out = *in
	if in.TotalRepos != nil {
		in, out := &in.TotalRepos, &out.TotalRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.RootRepos != nil {
		in, out := &in.RootRepos, &out.RootRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ForkRepos != nil {
		in, out := &in.ForkRepos, &out.ForkRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OrgRepos != nil {
		in, out := &in.OrgRepos, &out.OrgRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalPushes != nil {
		in, out := &in.TotalPushes, &out.TotalPushes
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.TotalWikis != nil {
		in, out := &in.TotalWikis, &out.TotalWikis
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepoStats.
func (in *RepoStats) DeepCopy() *RepoStats {
	if in == nil {
		return nil
	}
	out := new(RepoStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepoStatus) DeepCopyInto(out *RepoStatus) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TargetURL != nil {
		in, out := &in.TargetURL, &out.TargetURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Context != nil {
		in, out := &in.Context, &out.Context
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Creator != nil {
		in, out := &in.Creator, &out.Creator
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepoStatus.
func (in *RepoStatus) DeepCopy() *RepoStatus {
	if in == nil {
		return nil
	}
	out := new(RepoStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoriesSearchResult) DeepCopyInto(out *RepositoriesSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]Repository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoriesSearchResult.
func (in *RepositoriesSearchResult) DeepCopy() *RepositoriesSearchResult {
	if in == nil {
		return nil
	}
	out := new(RepositoriesSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoriesService) DeepCopyInto(out *RepositoriesService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoriesService.
func (in *RepositoriesService) DeepCopy() *RepositoriesService {
	if in == nil {
		return nil
	}
	out := new(RepositoriesService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Repository) DeepCopyInto(out *Repository) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FullName != nil {
		in, out := &in.FullName, &out.FullName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Homepage != nil {
		in, out := &in.Homepage, &out.Homepage
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CodeOfConduct != nil {
		in, out := &in.CodeOfConduct, &out.CodeOfConduct
		if *in == nil {
			*out = nil
		} else {
			*out = new(CodeOfConduct)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.DefaultBranch != nil {
		in, out := &in.DefaultBranch, &out.DefaultBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MasterBranch != nil {
		in, out := &in.MasterBranch, &out.MasterBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PushedAt != nil {
		in, out := &in.PushedAt, &out.PushedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CloneURL != nil {
		in, out := &in.CloneURL, &out.CloneURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MirrorURL != nil {
		in, out := &in.MirrorURL, &out.MirrorURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SSHURL != nil {
		in, out := &in.SSHURL, &out.SSHURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SVNURL != nil {
		in, out := &in.SVNURL, &out.SVNURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Language != nil {
		in, out := &in.Language, &out.Language
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Fork != nil {
		in, out := &in.Fork, &out.Fork
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ForksCount != nil {
		in, out := &in.ForksCount, &out.ForksCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.NetworkCount != nil {
		in, out := &in.NetworkCount, &out.NetworkCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OpenIssuesCount != nil {
		in, out := &in.OpenIssuesCount, &out.OpenIssuesCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.StargazersCount != nil {
		in, out := &in.StargazersCount, &out.StargazersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.SubscribersCount != nil {
		in, out := &in.SubscribersCount, &out.SubscribersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.WatchersCount != nil {
		in, out := &in.WatchersCount, &out.WatchersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.AutoInit != nil {
		in, out := &in.AutoInit, &out.AutoInit
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Parent != nil {
		in, out := &in.Parent, &out.Parent
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		if *in == nil {
			*out = nil
		} else {
			*out = new(map[string]bool)
			if **in != nil {
				in, out := *in, *out
				*out = make(map[string]bool, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	if in.AllowRebaseMerge != nil {
		in, out := &in.AllowRebaseMerge, &out.AllowRebaseMerge
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.AllowSquashMerge != nil {
		in, out := &in.AllowSquashMerge, &out.AllowSquashMerge
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.AllowMergeCommit != nil {
		in, out := &in.AllowMergeCommit, &out.AllowMergeCommit
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		if *in == nil {
			*out = nil
		} else {
			*out = new(License)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Private != nil {
		in, out := &in.Private, &out.Private
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasIssues != nil {
		in, out := &in.HasIssues, &out.HasIssues
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasWiki != nil {
		in, out := &in.HasWiki, &out.HasWiki
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasPages != nil {
		in, out := &in.HasPages, &out.HasPages
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasProjects != nil {
		in, out := &in.HasProjects, &out.HasProjects
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HasDownloads != nil {
		in, out := &in.HasDownloads, &out.HasDownloads
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.LicenseTemplate != nil {
		in, out := &in.LicenseTemplate, &out.LicenseTemplate
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitignoreTemplate != nil {
		in, out := &in.GitignoreTemplate, &out.GitignoreTemplate
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Archived != nil {
		in, out := &in.Archived, &out.Archived
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.TeamID != nil {
		in, out := &in.TeamID, &out.TeamID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ArchiveURL != nil {
		in, out := &in.ArchiveURL, &out.ArchiveURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AssigneesURL != nil {
		in, out := &in.AssigneesURL, &out.AssigneesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BlobsURL != nil {
		in, out := &in.BlobsURL, &out.BlobsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BranchesURL != nil {
		in, out := &in.BranchesURL, &out.BranchesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CollaboratorsURL != nil {
		in, out := &in.CollaboratorsURL, &out.CollaboratorsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitsURL != nil {
		in, out := &in.CommitsURL, &out.CommitsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CompareURL != nil {
		in, out := &in.CompareURL, &out.CompareURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ContentsURL != nil {
		in, out := &in.ContentsURL, &out.ContentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ContributorsURL != nil {
		in, out := &in.ContributorsURL, &out.ContributorsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DeploymentsURL != nil {
		in, out := &in.DeploymentsURL, &out.DeploymentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DownloadsURL != nil {
		in, out := &in.DownloadsURL, &out.DownloadsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ForksURL != nil {
		in, out := &in.ForksURL, &out.ForksURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitCommitsURL != nil {
		in, out := &in.GitCommitsURL, &out.GitCommitsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitRefsURL != nil {
		in, out := &in.GitRefsURL, &out.GitRefsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitTagsURL != nil {
		in, out := &in.GitTagsURL, &out.GitTagsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HooksURL != nil {
		in, out := &in.HooksURL, &out.HooksURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssueCommentURL != nil {
		in, out := &in.IssueCommentURL, &out.IssueCommentURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssueEventsURL != nil {
		in, out := &in.IssueEventsURL, &out.IssueEventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.IssuesURL != nil {
		in, out := &in.IssuesURL, &out.IssuesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.KeysURL != nil {
		in, out := &in.KeysURL, &out.KeysURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LabelsURL != nil {
		in, out := &in.LabelsURL, &out.LabelsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LanguagesURL != nil {
		in, out := &in.LanguagesURL, &out.LanguagesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MergesURL != nil {
		in, out := &in.MergesURL, &out.MergesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MilestonesURL != nil {
		in, out := &in.MilestonesURL, &out.MilestonesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NotificationsURL != nil {
		in, out := &in.NotificationsURL, &out.NotificationsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PullsURL != nil {
		in, out := &in.PullsURL, &out.PullsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReleasesURL != nil {
		in, out := &in.ReleasesURL, &out.ReleasesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StargazersURL != nil {
		in, out := &in.StargazersURL, &out.StargazersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StatusesURL != nil {
		in, out := &in.StatusesURL, &out.StatusesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubscribersURL != nil {
		in, out := &in.SubscribersURL, &out.SubscribersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubscriptionURL != nil {
		in, out := &in.SubscriptionURL, &out.SubscriptionURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TagsURL != nil {
		in, out := &in.TagsURL, &out.TagsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TreesURL != nil {
		in, out := &in.TreesURL, &out.TreesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TeamsURL != nil {
		in, out := &in.TeamsURL, &out.TeamsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TextMatches != nil {
		in, out := &in.TextMatches, &out.TextMatches
		*out = make([]TextMatch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Repository.
func (in *Repository) DeepCopy() *Repository {
	if in == nil {
		return nil
	}
	out := new(Repository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryAddCollaboratorOptions) DeepCopyInto(out *RepositoryAddCollaboratorOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryAddCollaboratorOptions.
func (in *RepositoryAddCollaboratorOptions) DeepCopy() *RepositoryAddCollaboratorOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryAddCollaboratorOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryComment) DeepCopyInto(out *RepositoryComment) {
	*out = *in
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Reactions != nil {
		in, out := &in.Reactions, &out.Reactions
		if *in == nil {
			*out = nil
		} else {
			*out = new(Reactions)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Position != nil {
		in, out := &in.Position, &out.Position
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryComment.
func (in *RepositoryComment) DeepCopy() *RepositoryComment {
	if in == nil {
		return nil
	}
	out := new(RepositoryComment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryCommit) DeepCopyInto(out *RepositoryCommit) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(Commit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Parents != nil {
		in, out := &in.Parents, &out.Parents
		*out = make([]Commit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Stats != nil {
		in, out := &in.Stats, &out.Stats
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitStats)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Files != nil {
		in, out := &in.Files, &out.Files
		*out = make([]CommitFile, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryCommit.
func (in *RepositoryCommit) DeepCopy() *RepositoryCommit {
	if in == nil {
		return nil
	}
	out := new(RepositoryCommit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryContent) DeepCopyInto(out *RepositoryContent) {
	*out = *in
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DownloadURL != nil {
		in, out := &in.DownloadURL, &out.DownloadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryContent.
func (in *RepositoryContent) DeepCopy() *RepositoryContent {
	if in == nil {
		return nil
	}
	out := new(RepositoryContent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryContentFileOptions) DeepCopyInto(out *RepositoryContentFileOptions) {
	*out = *in
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		*out = make([]byte, len(*in))
		copy(*out, *in)
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Branch != nil {
		in, out := &in.Branch, &out.Branch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryContentFileOptions.
func (in *RepositoryContentFileOptions) DeepCopy() *RepositoryContentFileOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryContentFileOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryContentGetOptions) DeepCopyInto(out *RepositoryContentGetOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryContentGetOptions.
func (in *RepositoryContentGetOptions) DeepCopy() *RepositoryContentGetOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryContentGetOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryContentResponse) DeepCopyInto(out *RepositoryContentResponse) {
	*out = *in
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryContent)
			(*in).DeepCopyInto(*out)
		}
	}
	in.Commit.DeepCopyInto(&out.Commit)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryContentResponse.
func (in *RepositoryContentResponse) DeepCopy() *RepositoryContentResponse {
	if in == nil {
		return nil
	}
	out := new(RepositoryContentResponse)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryCreateForkOptions) DeepCopyInto(out *RepositoryCreateForkOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryCreateForkOptions.
func (in *RepositoryCreateForkOptions) DeepCopy() *RepositoryCreateForkOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryCreateForkOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryEvent) DeepCopyInto(out *RepositoryEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryEvent.
func (in *RepositoryEvent) DeepCopy() *RepositoryEvent {
	if in == nil {
		return nil
	}
	out := new(RepositoryEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryInvitation) DeepCopyInto(out *RepositoryInvitation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Invitee != nil {
		in, out := &in.Invitee, &out.Invitee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Inviter != nil {
		in, out := &in.Inviter, &out.Inviter
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryInvitation.
func (in *RepositoryInvitation) DeepCopy() *RepositoryInvitation {
	if in == nil {
		return nil
	}
	out := new(RepositoryInvitation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryLicense) DeepCopyInto(out *RepositoryLicense) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GitURL != nil {
		in, out := &in.GitURL, &out.GitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DownloadURL != nil {
		in, out := &in.DownloadURL, &out.DownloadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.License != nil {
		in, out := &in.License, &out.License
		if *in == nil {
			*out = nil
		} else {
			*out = new(License)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryLicense.
func (in *RepositoryLicense) DeepCopy() *RepositoryLicense {
	if in == nil {
		return nil
	}
	out := new(RepositoryLicense)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryListAllOptions) DeepCopyInto(out *RepositoryListAllOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryListAllOptions.
func (in *RepositoryListAllOptions) DeepCopy() *RepositoryListAllOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryListAllOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryListByOrgOptions) DeepCopyInto(out *RepositoryListByOrgOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryListByOrgOptions.
func (in *RepositoryListByOrgOptions) DeepCopy() *RepositoryListByOrgOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryListByOrgOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryListForksOptions) DeepCopyInto(out *RepositoryListForksOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryListForksOptions.
func (in *RepositoryListForksOptions) DeepCopy() *RepositoryListForksOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryListForksOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryListOptions) DeepCopyInto(out *RepositoryListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryListOptions.
func (in *RepositoryListOptions) DeepCopy() *RepositoryListOptions {
	if in == nil {
		return nil
	}
	out := new(RepositoryListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryMergeRequest) DeepCopyInto(out *RepositoryMergeRequest) {
	*out = *in
	if in.Base != nil {
		in, out := &in.Base, &out.Base
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Head != nil {
		in, out := &in.Head, &out.Head
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitMessage != nil {
		in, out := &in.CommitMessage, &out.CommitMessage
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryMergeRequest.
func (in *RepositoryMergeRequest) DeepCopy() *RepositoryMergeRequest {
	if in == nil {
		return nil
	}
	out := new(RepositoryMergeRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryParticipation) DeepCopyInto(out *RepositoryParticipation) {
	*out = *in
	if in.All != nil {
		in, out := &in.All, &out.All
		*out = make([]int, len(*in))
		copy(*out, *in)
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = make([]int, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryParticipation.
func (in *RepositoryParticipation) DeepCopy() *RepositoryParticipation {
	if in == nil {
		return nil
	}
	out := new(RepositoryParticipation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryPermissionLevel) DeepCopyInto(out *RepositoryPermissionLevel) {
	*out = *in
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryPermissionLevel.
func (in *RepositoryPermissionLevel) DeepCopy() *RepositoryPermissionLevel {
	if in == nil {
		return nil
	}
	out := new(RepositoryPermissionLevel)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryRelease) DeepCopyInto(out *RepositoryRelease) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.TagName != nil {
		in, out := &in.TagName, &out.TagName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TargetCommitish != nil {
		in, out := &in.TargetCommitish, &out.TargetCommitish
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Draft != nil {
		in, out := &in.Draft, &out.Draft
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Prerelease != nil {
		in, out := &in.Prerelease, &out.Prerelease
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.PublishedAt != nil {
		in, out := &in.PublishedAt, &out.PublishedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AssetsURL != nil {
		in, out := &in.AssetsURL, &out.AssetsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Assets != nil {
		in, out := &in.Assets, &out.Assets
		*out = make([]ReleaseAsset, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UploadURL != nil {
		in, out := &in.UploadURL, &out.UploadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ZipballURL != nil {
		in, out := &in.ZipballURL, &out.ZipballURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TarballURL != nil {
		in, out := &in.TarballURL, &out.TarballURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryRelease.
func (in *RepositoryRelease) DeepCopy() *RepositoryRelease {
	if in == nil {
		return nil
	}
	out := new(RepositoryRelease)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryTag) DeepCopyInto(out *RepositoryTag) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(Commit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.ZipballURL != nil {
		in, out := &in.ZipballURL, &out.ZipballURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TarballURL != nil {
		in, out := &in.TarballURL, &out.TarballURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryTag.
func (in *RepositoryTag) DeepCopy() *RepositoryTag {
	if in == nil {
		return nil
	}
	out := new(RepositoryTag)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequestCheckSuiteOptions) DeepCopyInto(out *RequestCheckSuiteOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequestCheckSuiteOptions.
func (in *RequestCheckSuiteOptions) DeepCopy() *RequestCheckSuiteOptions {
	if in == nil {
		return nil
	}
	out := new(RequestCheckSuiteOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredStatusChecks) DeepCopyInto(out *RequiredStatusChecks) {
	*out = *in
	if in.Contexts != nil {
		in, out := &in.Contexts, &out.Contexts
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredStatusChecks.
func (in *RequiredStatusChecks) DeepCopy() *RequiredStatusChecks {
	if in == nil {
		return nil
	}
	out := new(RequiredStatusChecks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Response) DeepCopyInto(out *Response) {
	*out = *in
	if in.Response != nil {
		in, out := &in.Response, &out.Response
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Response)
			(*in).DeepCopyInto(*out)
		}
	}
	in.Rate.DeepCopyInto(&out.Rate)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Response.
func (in *Response) DeepCopy() *Response {
	if in == nil {
		return nil
	}
	out := new(Response)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Reviewers) DeepCopyInto(out *Reviewers) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]*User, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(User)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Teams != nil {
		in, out := &in.Teams, &out.Teams
		*out = make([]*Team, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Team)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Reviewers.
func (in *Reviewers) DeepCopy() *Reviewers {
	if in == nil {
		return nil
	}
	out := new(Reviewers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReviewersRequest) DeepCopyInto(out *ReviewersRequest) {
	*out = *in
	if in.Reviewers != nil {
		in, out := &in.Reviewers, &out.Reviewers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.TeamReviewers != nil {
		in, out := &in.TeamReviewers, &out.TeamReviewers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReviewersRequest.
func (in *ReviewersRequest) DeepCopy() *ReviewersRequest {
	if in == nil {
		return nil
	}
	out := new(ReviewersRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchOptions) DeepCopyInto(out *SearchOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchOptions.
func (in *SearchOptions) DeepCopy() *SearchOptions {
	if in == nil {
		return nil
	}
	out := new(SearchOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SearchService) DeepCopyInto(out *SearchService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SearchService.
func (in *SearchService) DeepCopy() *SearchService {
	if in == nil {
		return nil
	}
	out := new(SearchService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceHook) DeepCopyInto(out *ServiceHook) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Events != nil {
		in, out := &in.Events, &out.Events
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.SupportedEvents != nil {
		in, out := &in.SupportedEvents, &out.SupportedEvents
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = make([][]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make([]string, len(*in))
				copy(*out, *in)
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceHook.
func (in *ServiceHook) DeepCopy() *ServiceHook {
	if in == nil {
		return nil
	}
	out := new(ServiceHook)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SignatureVerification) DeepCopyInto(out *SignatureVerification) {
	*out = *in
	if in.Verified != nil {
		in, out := &in.Verified, &out.Verified
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Reason != nil {
		in, out := &in.Reason, &out.Reason
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Signature != nil {
		in, out := &in.Signature, &out.Signature
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Payload != nil {
		in, out := &in.Payload, &out.Payload
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SignatureVerification.
func (in *SignatureVerification) DeepCopy() *SignatureVerification {
	if in == nil {
		return nil
	}
	out := new(SignatureVerification)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Source) DeepCopyInto(out *Source) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Actor != nil {
		in, out := &in.Actor, &out.Actor
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Source.
func (in *Source) DeepCopy() *Source {
	if in == nil {
		return nil
	}
	out := new(Source)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceImportAuthor) DeepCopyInto(out *SourceImportAuthor) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.RemoteID != nil {
		in, out := &in.RemoteID, &out.RemoteID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RemoteName != nil {
		in, out := &in.RemoteName, &out.RemoteName
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ImportURL != nil {
		in, out := &in.ImportURL, &out.ImportURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceImportAuthor.
func (in *SourceImportAuthor) DeepCopy() *SourceImportAuthor {
	if in == nil {
		return nil
	}
	out := new(SourceImportAuthor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Stargazer) DeepCopyInto(out *Stargazer) {
	*out = *in
	if in.StarredAt != nil {
		in, out := &in.StarredAt, &out.StarredAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Stargazer.
func (in *Stargazer) DeepCopy() *Stargazer {
	if in == nil {
		return nil
	}
	out := new(Stargazer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StarredRepository) DeepCopyInto(out *StarredRepository) {
	*out = *in
	if in.StarredAt != nil {
		in, out := &in.StarredAt, &out.StarredAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StarredRepository.
func (in *StarredRepository) DeepCopy() *StarredRepository {
	if in == nil {
		return nil
	}
	out := new(StarredRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StatusEvent) DeepCopyInto(out *StatusEvent) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TargetURL != nil {
		in, out := &in.TargetURL, &out.TargetURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Branches != nil {
		in, out := &in.Branches, &out.Branches
		*out = make([]*Branch, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Branch)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Context != nil {
		in, out := &in.Context, &out.Context
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commit != nil {
		in, out := &in.Commit, &out.Commit
		if *in == nil {
			*out = nil
		} else {
			*out = new(RepositoryCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StatusEvent.
func (in *StatusEvent) DeepCopy() *StatusEvent {
	if in == nil {
		return nil
	}
	out := new(StatusEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Subscription) DeepCopyInto(out *Subscription) {
	*out = *in
	if in.Subscribed != nil {
		in, out := &in.Subscribed, &out.Subscribed
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Ignored != nil {
		in, out := &in.Ignored, &out.Ignored
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Reason != nil {
		in, out := &in.Reason, &out.Reason
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoryURL != nil {
		in, out := &in.RepositoryURL, &out.RepositoryURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ThreadURL != nil {
		in, out := &in.ThreadURL, &out.ThreadURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Subscription.
func (in *Subscription) DeepCopy() *Subscription {
	if in == nil {
		return nil
	}
	out := new(Subscription)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Tag) DeepCopyInto(out *Tag) {
	*out = *in
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Tagger != nil {
		in, out := &in.Tagger, &out.Tagger
		if *in == nil {
			*out = nil
		} else {
			*out = new(CommitAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Object != nil {
		in, out := &in.Object, &out.Object
		if *in == nil {
			*out = nil
		} else {
			*out = new(GitObject)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Verification != nil {
		in, out := &in.Verification, &out.Verification
		if *in == nil {
			*out = nil
		} else {
			*out = new(SignatureVerification)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tag.
func (in *Tag) DeepCopy() *Tag {
	if in == nil {
		return nil
	}
	out := new(Tag)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Team) DeepCopyInto(out *Team) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Slug != nil {
		in, out := &in.Slug, &out.Slug
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Privacy != nil {
		in, out := &in.Privacy, &out.Privacy
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MembersCount != nil {
		in, out := &in.MembersCount, &out.MembersCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.ReposCount != nil {
		in, out := &in.ReposCount, &out.ReposCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Organization != nil {
		in, out := &in.Organization, &out.Organization
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.MembersURL != nil {
		in, out := &in.MembersURL, &out.MembersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoriesURL != nil {
		in, out := &in.RepositoriesURL, &out.RepositoriesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Parent != nil {
		in, out := &in.Parent, &out.Parent
		if *in == nil {
			*out = nil
		} else {
			*out = new(Team)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.LDAPDN != nil {
		in, out := &in.LDAPDN, &out.LDAPDN
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Team.
func (in *Team) DeepCopy() *Team {
	if in == nil {
		return nil
	}
	out := new(Team)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamAddEvent) DeepCopyInto(out *TeamAddEvent) {
	*out = *in
	if in.Team != nil {
		in, out := &in.Team, &out.Team
		if *in == nil {
			*out = nil
		} else {
			*out = new(Team)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamAddEvent.
func (in *TeamAddEvent) DeepCopy() *TeamAddEvent {
	if in == nil {
		return nil
	}
	out := new(TeamAddEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamChange) DeepCopyInto(out *TeamChange) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Privacy != nil {
		in, out := &in.Privacy, &out.Privacy
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct{ From *string })
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repository != nil {
		in, out := &in.Repository, &out.Repository
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct {
				Permissions *struct {
					From *struct {
						Admin *bool
						Pull  *bool
						Push  *bool
					}
				}
			})
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamChange.
func (in *TeamChange) DeepCopy() *TeamChange {
	if in == nil {
		return nil
	}
	out := new(TeamChange)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamDiscussion) DeepCopyInto(out *TeamDiscussion) {
	*out = *in
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Body != nil {
		in, out := &in.Body, &out.Body
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BodyHTML != nil {
		in, out := &in.BodyHTML, &out.BodyHTML
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.BodyVersion != nil {
		in, out := &in.BodyVersion, &out.BodyVersion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommentsCount != nil {
		in, out := &in.CommentsCount, &out.CommentsCount
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.CommentsURL != nil {
		in, out := &in.CommentsURL, &out.CommentsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.LastEditedAt != nil {
		in, out := &in.LastEditedAt, &out.LastEditedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.NodeID != nil {
		in, out := &in.NodeID, &out.NodeID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Number != nil {
		in, out := &in.Number, &out.Number
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.Pinned != nil {
		in, out := &in.Pinned, &out.Pinned
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Private != nil {
		in, out := &in.Private, &out.Private
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.TeamURL != nil {
		in, out := &in.TeamURL, &out.TeamURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamDiscussion.
func (in *TeamDiscussion) DeepCopy() *TeamDiscussion {
	if in == nil {
		return nil
	}
	out := new(TeamDiscussion)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamEvent) DeepCopyInto(out *TeamEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Team != nil {
		in, out := &in.Team, &out.Team
		if *in == nil {
			*out = nil
		} else {
			*out = new(Team)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Changes != nil {
		in, out := &in.Changes, &out.Changes
		if *in == nil {
			*out = nil
		} else {
			*out = new(TeamChange)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Org != nil {
		in, out := &in.Org, &out.Org
		if *in == nil {
			*out = nil
		} else {
			*out = new(Organization)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamEvent.
func (in *TeamEvent) DeepCopy() *TeamEvent {
	if in == nil {
		return nil
	}
	out := new(TeamEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamLDAPMapping) DeepCopyInto(out *TeamLDAPMapping) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.LDAPDN != nil {
		in, out := &in.LDAPDN, &out.LDAPDN
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Slug != nil {
		in, out := &in.Slug, &out.Slug
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Privacy != nil {
		in, out := &in.Privacy, &out.Privacy
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.MembersURL != nil {
		in, out := &in.MembersURL, &out.MembersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.RepositoriesURL != nil {
		in, out := &in.RepositoriesURL, &out.RepositoriesURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamLDAPMapping.
func (in *TeamLDAPMapping) DeepCopy() *TeamLDAPMapping {
	if in == nil {
		return nil
	}
	out := new(TeamLDAPMapping)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeamsService) DeepCopyInto(out *TeamsService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeamsService.
func (in *TeamsService) DeepCopy() *TeamsService {
	if in == nil {
		return nil
	}
	out := new(TeamsService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TextMatch) DeepCopyInto(out *TextMatch) {
	*out = *in
	if in.ObjectURL != nil {
		in, out := &in.ObjectURL, &out.ObjectURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ObjectType != nil {
		in, out := &in.ObjectType, &out.ObjectType
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Property != nil {
		in, out := &in.Property, &out.Property
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Fragment != nil {
		in, out := &in.Fragment, &out.Fragment
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Matches != nil {
		in, out := &in.Matches, &out.Matches
		*out = make([]Match, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TextMatch.
func (in *TextMatch) DeepCopy() *TextMatch {
	if in == nil {
		return nil
	}
	out := new(TextMatch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Timeline) DeepCopyInto(out *Timeline) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitURL != nil {
		in, out := &in.CommitURL, &out.CommitURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Actor != nil {
		in, out := &in.Actor, &out.Actor
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Event != nil {
		in, out := &in.Event, &out.Event
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CommitID != nil {
		in, out := &in.CommitID, &out.CommitID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Label != nil {
		in, out := &in.Label, &out.Label
		if *in == nil {
			*out = nil
		} else {
			*out = new(Label)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Assignee != nil {
		in, out := &in.Assignee, &out.Assignee
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Milestone != nil {
		in, out := &in.Milestone, &out.Milestone
		if *in == nil {
			*out = nil
		} else {
			*out = new(Milestone)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Source != nil {
		in, out := &in.Source, &out.Source
		if *in == nil {
			*out = nil
		} else {
			*out = new(Source)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Rename != nil {
		in, out := &in.Rename, &out.Rename
		if *in == nil {
			*out = nil
		} else {
			*out = new(Rename)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Timeline.
func (in *Timeline) DeepCopy() *Timeline {
	if in == nil {
		return nil
	}
	out := new(Timeline)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Timestamp) DeepCopyInto(out *Timestamp) {
	*out = *in
	in.Time.DeepCopyInto(&out.Time)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Timestamp.
func (in *Timestamp) DeepCopy() *Timestamp {
	if in == nil {
		return nil
	}
	out := new(Timestamp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficBreakdownOptions) DeepCopyInto(out *TrafficBreakdownOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficBreakdownOptions.
func (in *TrafficBreakdownOptions) DeepCopy() *TrafficBreakdownOptions {
	if in == nil {
		return nil
	}
	out := new(TrafficBreakdownOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficClones) DeepCopyInto(out *TrafficClones) {
	*out = *in
	if in.Clones != nil {
		in, out := &in.Clones, &out.Clones
		*out = make([]*TrafficData, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(TrafficData)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Uniques != nil {
		in, out := &in.Uniques, &out.Uniques
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficClones.
func (in *TrafficClones) DeepCopy() *TrafficClones {
	if in == nil {
		return nil
	}
	out := new(TrafficClones)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficData) DeepCopyInto(out *TrafficData) {
	*out = *in
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Uniques != nil {
		in, out := &in.Uniques, &out.Uniques
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficData.
func (in *TrafficData) DeepCopy() *TrafficData {
	if in == nil {
		return nil
	}
	out := new(TrafficData)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficPath) DeepCopyInto(out *TrafficPath) {
	*out = *in
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Title != nil {
		in, out := &in.Title, &out.Title
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Uniques != nil {
		in, out := &in.Uniques, &out.Uniques
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficPath.
func (in *TrafficPath) DeepCopy() *TrafficPath {
	if in == nil {
		return nil
	}
	out := new(TrafficPath)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficReferrer) DeepCopyInto(out *TrafficReferrer) {
	*out = *in
	if in.Referrer != nil {
		in, out := &in.Referrer, &out.Referrer
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Uniques != nil {
		in, out := &in.Uniques, &out.Uniques
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficReferrer.
func (in *TrafficReferrer) DeepCopy() *TrafficReferrer {
	if in == nil {
		return nil
	}
	out := new(TrafficReferrer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficViews) DeepCopyInto(out *TrafficViews) {
	*out = *in
	if in.Views != nil {
		in, out := &in.Views, &out.Views
		*out = make([]*TrafficData, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(TrafficData)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	if in.Count != nil {
		in, out := &in.Count, &out.Count
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Uniques != nil {
		in, out := &in.Uniques, &out.Uniques
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficViews.
func (in *TrafficViews) DeepCopy() *TrafficViews {
	if in == nil {
		return nil
	}
	out := new(TrafficViews)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TransferRequest) DeepCopyInto(out *TransferRequest) {
	*out = *in
	if in.TeamID != nil {
		in, out := &in.TeamID, &out.TeamID
		*out = make([]int64, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TransferRequest.
func (in *TransferRequest) DeepCopy() *TransferRequest {
	if in == nil {
		return nil
	}
	out := new(TransferRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Tree) DeepCopyInto(out *Tree) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Entries != nil {
		in, out := &in.Entries, &out.Entries
		*out = make([]TreeEntry, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Truncated != nil {
		in, out := &in.Truncated, &out.Truncated
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Tree.
func (in *Tree) DeepCopy() *Tree {
	if in == nil {
		return nil
	}
	out := new(Tree)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TreeEntry) DeepCopyInto(out *TreeEntry) {
	*out = *in
	if in.SHA != nil {
		in, out := &in.SHA, &out.SHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Content != nil {
		in, out := &in.Content, &out.Content
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TreeEntry.
func (in *TreeEntry) DeepCopy() *TreeEntry {
	if in == nil {
		return nil
	}
	out := new(TreeEntry)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TwoFactorAuthError) DeepCopyInto(out *TwoFactorAuthError) {
	*out = *in
	if in.Response != nil {
		in, out := &in.Response, &out.Response
		if *in == nil {
			*out = nil
		} else {
			*out = new(http.Response)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = make([]Error, len(*in))
		copy(*out, *in)
	}
	if in.Block != nil {
		in, out := &in.Block, &out.Block
		if *in == nil {
			*out = nil
		} else {
			*out = new(struct {
				Reason    string
				CreatedAt *Timestamp
			})
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TwoFactorAuthError.
func (in *TwoFactorAuthError) DeepCopy() *TwoFactorAuthError {
	if in == nil {
		return nil
	}
	out := new(TwoFactorAuthError)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UnauthenticatedRateLimitedTransport) DeepCopyInto(out *UnauthenticatedRateLimitedTransport) {
	*out = *in
	if in.Transport == nil {
		out.Transport = nil
	} else {
		out.Transport = in.Transport.DeepCopyRoundTripper()
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UnauthenticatedRateLimitedTransport.
func (in *UnauthenticatedRateLimitedTransport) DeepCopy() *UnauthenticatedRateLimitedTransport {
	if in == nil {
		return nil
	}
	out := new(UnauthenticatedRateLimitedTransport)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UpdateCheckRunOptions) DeepCopyInto(out *UpdateCheckRunOptions) {
	*out = *in
	if in.HeadBranch != nil {
		in, out := &in.HeadBranch, &out.HeadBranch
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HeadSHA != nil {
		in, out := &in.HeadSHA, &out.HeadSHA
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.DetailsURL != nil {
		in, out := &in.DetailsURL, &out.DetailsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ExternalID != nil {
		in, out := &in.ExternalID, &out.ExternalID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Conclusion != nil {
		in, out := &in.Conclusion, &out.Conclusion
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CompletedAt != nil {
		in, out := &in.CompletedAt, &out.CompletedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Output != nil {
		in, out := &in.Output, &out.Output
		if *in == nil {
			*out = nil
		} else {
			*out = new(CheckRunOutput)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UpdateCheckRunOptions.
func (in *UpdateCheckRunOptions) DeepCopy() *UpdateCheckRunOptions {
	if in == nil {
		return nil
	}
	out := new(UpdateCheckRunOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UploadOptions) DeepCopyInto(out *UploadOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UploadOptions.
func (in *UploadOptions) DeepCopy() *UploadOptions {
	if in == nil {
		return nil
	}
	out := new(UploadOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.HTMLURL != nil {
		in, out := &in.HTMLURL, &out.HTMLURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GravatarID != nil {
		in, out := &in.GravatarID, &out.GravatarID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Company != nil {
		in, out := &in.Company, &out.Company
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Blog != nil {
		in, out := &in.Blog, &out.Blog
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Location != nil {
		in, out := &in.Location, &out.Location
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Hireable != nil {
		in, out := &in.Hireable, &out.Hireable
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Bio != nil {
		in, out := &in.Bio, &out.Bio
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.PublicRepos != nil {
		in, out := &in.PublicRepos, &out.PublicRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PublicGists != nil {
		in, out := &in.PublicGists, &out.PublicGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Followers != nil {
		in, out := &in.Followers, &out.Followers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Following != nil {
		in, out := &in.Following, &out.Following
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.SuspendedAt != nil {
		in, out := &in.SuspendedAt, &out.SuspendedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SiteAdmin != nil {
		in, out := &in.SiteAdmin, &out.SiteAdmin
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.TotalPrivateRepos != nil {
		in, out := &in.TotalPrivateRepos, &out.TotalPrivateRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.OwnedPrivateRepos != nil {
		in, out := &in.OwnedPrivateRepos, &out.OwnedPrivateRepos
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.PrivateGists != nil {
		in, out := &in.PrivateGists, &out.PrivateGists
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.DiskUsage != nil {
		in, out := &in.DiskUsage, &out.DiskUsage
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Collaborators != nil {
		in, out := &in.Collaborators, &out.Collaborators
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Plan != nil {
		in, out := &in.Plan, &out.Plan
		if *in == nil {
			*out = nil
		} else {
			*out = new(Plan)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowingURL != nil {
		in, out := &in.FollowingURL, &out.FollowingURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowersURL != nil {
		in, out := &in.FollowersURL, &out.FollowersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GistsURL != nil {
		in, out := &in.GistsURL, &out.GistsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OrganizationsURL != nil {
		in, out := &in.OrganizationsURL, &out.OrganizationsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReceivedEventsURL != nil {
		in, out := &in.ReceivedEventsURL, &out.ReceivedEventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReposURL != nil {
		in, out := &in.ReposURL, &out.ReposURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StarredURL != nil {
		in, out := &in.StarredURL, &out.StarredURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubscriptionsURL != nil {
		in, out := &in.SubscriptionsURL, &out.SubscriptionsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.TextMatches != nil {
		in, out := &in.TextMatches, &out.TextMatches
		*out = make([]TextMatch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		if *in == nil {
			*out = nil
		} else {
			*out = new(map[string]bool)
			if **in != nil {
				in, out := *in, *out
				*out = make(map[string]bool, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserEmail) DeepCopyInto(out *UserEmail) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Primary != nil {
		in, out := &in.Primary, &out.Primary
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Verified != nil {
		in, out := &in.Verified, &out.Verified
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserEmail.
func (in *UserEmail) DeepCopy() *UserEmail {
	if in == nil {
		return nil
	}
	out := new(UserEmail)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserLDAPMapping) DeepCopyInto(out *UserLDAPMapping) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.LDAPDN != nil {
		in, out := &in.LDAPDN, &out.LDAPDN
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.AvatarURL != nil {
		in, out := &in.AvatarURL, &out.AvatarURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GravatarID != nil {
		in, out := &in.GravatarID, &out.GravatarID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SiteAdmin != nil {
		in, out := &in.SiteAdmin, &out.SiteAdmin
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.EventsURL != nil {
		in, out := &in.EventsURL, &out.EventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowingURL != nil {
		in, out := &in.FollowingURL, &out.FollowingURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.FollowersURL != nil {
		in, out := &in.FollowersURL, &out.FollowersURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.GistsURL != nil {
		in, out := &in.GistsURL, &out.GistsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.OrganizationsURL != nil {
		in, out := &in.OrganizationsURL, &out.OrganizationsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReceivedEventsURL != nil {
		in, out := &in.ReceivedEventsURL, &out.ReceivedEventsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.ReposURL != nil {
		in, out := &in.ReposURL, &out.ReposURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.StarredURL != nil {
		in, out := &in.StarredURL, &out.StarredURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.SubscriptionsURL != nil {
		in, out := &in.SubscriptionsURL, &out.SubscriptionsURL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserLDAPMapping.
func (in *UserLDAPMapping) DeepCopy() *UserLDAPMapping {
	if in == nil {
		return nil
	}
	out := new(UserLDAPMapping)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserListOptions) DeepCopyInto(out *UserListOptions) {
	*out = *in
	out.ListOptions = in.ListOptions
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserListOptions.
func (in *UserListOptions) DeepCopy() *UserListOptions {
	if in == nil {
		return nil
	}
	out := new(UserListOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserMigration) DeepCopyInto(out *UserMigration) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(int64)
			**out = **in
		}
	}
	if in.GUID != nil {
		in, out := &in.GUID, &out.GUID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.LockRepositories != nil {
		in, out := &in.LockRepositories, &out.LockRepositories
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ExcludeAttachments != nil {
		in, out := &in.ExcludeAttachments, &out.ExcludeAttachments
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.UpdatedAt != nil {
		in, out := &in.UpdatedAt, &out.UpdatedAt
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*Repository, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				(*out)[i] = nil
			} else {
				(*out)[i] = new(Repository)
				(*in)[i].DeepCopyInto((*out)[i])
			}
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserMigration.
func (in *UserMigration) DeepCopy() *UserMigration {
	if in == nil {
		return nil
	}
	out := new(UserMigration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserMigrationOptions) DeepCopyInto(out *UserMigrationOptions) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserMigrationOptions.
func (in *UserMigrationOptions) DeepCopy() *UserMigrationOptions {
	if in == nil {
		return nil
	}
	out := new(UserMigrationOptions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserStats) DeepCopyInto(out *UserStats) {
	*out = *in
	if in.TotalUsers != nil {
		in, out := &in.TotalUsers, &out.TotalUsers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.AdminUsers != nil {
		in, out := &in.AdminUsers, &out.AdminUsers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.SuspendedUsers != nil {
		in, out := &in.SuspendedUsers, &out.SuspendedUsers
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserStats.
func (in *UserStats) DeepCopy() *UserStats {
	if in == nil {
		return nil
	}
	out := new(UserStats)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UsersSearchResult) DeepCopyInto(out *UsersSearchResult) {
	*out = *in
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.IncompleteResults != nil {
		in, out := &in.IncompleteResults, &out.IncompleteResults
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]User, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UsersSearchResult.
func (in *UsersSearchResult) DeepCopy() *UsersSearchResult {
	if in == nil {
		return nil
	}
	out := new(UsersSearchResult)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UsersService) DeepCopyInto(out *UsersService) {
	*out = *in
	if in.client != nil {
		in, out := &in.client, &out.client
		if *in == nil {
			*out = nil
		} else {
			*out = new(Client)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UsersService.
func (in *UsersService) DeepCopy() *UsersService {
	if in == nil {
		return nil
	}
	out := new(UsersService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WatchEvent) DeepCopyInto(out *WatchEvent) {
	*out = *in
	if in.Action != nil {
		in, out := &in.Action, &out.Action
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Installation != nil {
		in, out := &in.Installation, &out.Installation
		if *in == nil {
			*out = nil
		} else {
			*out = new(Installation)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WatchEvent.
func (in *WatchEvent) DeepCopy() *WatchEvent {
	if in == nil {
		return nil
	}
	out := new(WatchEvent)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebHookAuthor) DeepCopyInto(out *WebHookAuthor) {
	*out = *in
	if in.Email != nil {
		in, out := &in.Email, &out.Email
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebHookAuthor.
func (in *WebHookAuthor) DeepCopy() *WebHookAuthor {
	if in == nil {
		return nil
	}
	out := new(WebHookAuthor)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebHookCommit) DeepCopyInto(out *WebHookCommit) {
	*out = *in
	if in.Added != nil {
		in, out := &in.Added, &out.Added
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Author != nil {
		in, out := &in.Author, &out.Author
		if *in == nil {
			*out = nil
		} else {
			*out = new(WebHookAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Committer != nil {
		in, out := &in.Committer, &out.Committer
		if *in == nil {
			*out = nil
		} else {
			*out = new(WebHookAuthor)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Distinct != nil {
		in, out := &in.Distinct, &out.Distinct
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Message != nil {
		in, out := &in.Message, &out.Message
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Modified != nil {
		in, out := &in.Modified, &out.Modified
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Removed != nil {
		in, out := &in.Removed, &out.Removed
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Timestamp != nil {
		in, out := &in.Timestamp, &out.Timestamp
		if *in == nil {
			*out = nil
		} else {
			*out = new(time.Time)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebHookCommit.
func (in *WebHookCommit) DeepCopy() *WebHookCommit {
	if in == nil {
		return nil
	}
	out := new(WebHookCommit)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebHookPayload) DeepCopyInto(out *WebHookPayload) {
	*out = *in
	if in.After != nil {
		in, out := &in.After, &out.After
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Before != nil {
		in, out := &in.Before, &out.Before
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		*out = make([]WebHookCommit, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Compare != nil {
		in, out := &in.Compare, &out.Compare
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Created != nil {
		in, out := &in.Created, &out.Created
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Deleted != nil {
		in, out := &in.Deleted, &out.Deleted
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.Forced != nil {
		in, out := &in.Forced, &out.Forced
		if *in == nil {
			*out = nil
		} else {
			*out = new(bool)
			**out = **in
		}
	}
	if in.HeadCommit != nil {
		in, out := &in.HeadCommit, &out.HeadCommit
		if *in == nil {
			*out = nil
		} else {
			*out = new(WebHookCommit)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Pusher != nil {
		in, out := &in.Pusher, &out.Pusher
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Ref != nil {
		in, out := &in.Ref, &out.Ref
		if *in == nil {
			*out = nil
		} else {
			*out = new(string)
			**out = **in
		}
	}
	if in.Repo != nil {
		in, out := &in.Repo, &out.Repo
		if *in == nil {
			*out = nil
		} else {
			*out = new(Repository)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Sender != nil {
		in, out := &in.Sender, &out.Sender
		if *in == nil {
			*out = nil
		} else {
			*out = new(User)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebHookPayload.
func (in *WebHookPayload) DeepCopy() *WebHookPayload {
	if in == nil {
		return nil
	}
	out := new(WebHookPayload)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeeklyCommitActivity) DeepCopyInto(out *WeeklyCommitActivity) {
	*out = *in
	if in.Days != nil {
		in, out := &in.Days, &out.Days
		*out = make([]int, len(*in))
		copy(*out, *in)
	}
	if in.Total != nil {
		in, out := &in.Total, &out.Total
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Week != nil {
		in, out := &in.Week, &out.Week
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeeklyCommitActivity.
func (in *WeeklyCommitActivity) DeepCopy() *WeeklyCommitActivity {
	if in == nil {
		return nil
	}
	out := new(WeeklyCommitActivity)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WeeklyStats) DeepCopyInto(out *WeeklyStats) {
	*out = *in
	if in.Week != nil {
		in, out := &in.Week, &out.Week
		if *in == nil {
			*out = nil
		} else {
			*out = new(Timestamp)
			(*in).DeepCopyInto(*out)
		}
	}
	if in.Additions != nil {
		in, out := &in.Additions, &out.Additions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Deletions != nil {
		in, out := &in.Deletions, &out.Deletions
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	if in.Commits != nil {
		in, out := &in.Commits, &out.Commits
		if *in == nil {
			*out = nil
		} else {
			*out = new(int)
			**out = **in
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WeeklyStats.
func (in *WeeklyStats) DeepCopy() *WeeklyStats {
	if in == nil {
		return nil
	}
	out := new(WeeklyStats)
	in.DeepCopyInto(out)
	return out
}
